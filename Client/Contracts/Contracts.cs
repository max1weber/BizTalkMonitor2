//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace BizTalk.Monitor.Client.Contracts
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IAgreementsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all agreements</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Agreement>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an agreement</summary>
        /// <param name="agreement">Agreement details.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(Agreement agreement, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get agreements between two partners</summary>
        /// <param name="partner1Name">First partner name</param>
        /// <param name="partner2Name">Second partner name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Agreement>>> GetAgreementsBetweenPartnersAsync(string partner1Name, string partner2Name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get agreement by name</summary>
        /// <param name="agreementName">Agreement name.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Agreement>> GetAgreementAsync(string agreementName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an agreement</summary>
        /// <param name="agreement">Agreement details.</param>
        /// <param name="agreementName">The current name of the agreement to update.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(Agreement agreement, string agreementName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete an agreement</summary>
        /// <param name="agreementName">Agreement name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string agreementName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IApplicationsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET Applications</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Application>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create an Application</summary>
        /// <param name="application">Details of Application to be created</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(Application application, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET Specific Application</summary>
        /// <param name="applicationName">Application Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Application>> GetApplicationAsync(string applicationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an Application</summary>
        /// <param name="applicationName">Name of Application to be updated</param>
        /// <param name="application">Details of Application to be updated</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(string applicationName, Application application, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete API.</summary>
        /// <param name="applicationName">The application name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string applicationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start API.</summary>
        /// <param name="applicationName">The application name.</param>
        /// <param name="applicationStartOptions">The application start options.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StartAsync(string applicationName, BTApplicationStartOptions applicationStartOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop API.</summary>
        /// <param name="applicationName">he application name.</param>
        /// <param name="applicationStopOptions">The application stop options.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StopAsync(string applicationName, ApplicationStopOptions applicationStopOptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IBatchesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get batches from one party to another</summary>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<BatchDescription>>> GetBatchesAsync(string senderParty, string receiverParty, string agreementName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create batch.</summary>
        /// <param name="batchDescription">The batch description.</param>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(BatchDescription batchDescription, string senderParty, string receiverParty, string agreementName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single batch from one party to another</summary>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <param name="batchName">The batch name.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<BatchDescription>> GetBatchAsync(string senderParty, string receiverParty, string agreementName, string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update batch.</summary>
        /// <param name="batchDescription">The batch description.</param>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <param name="batchName">The batch name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(BatchDescription batchDescription, string senderParty, string receiverParty, string agreementName, string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete batch.</summary>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <param name="batchName">The batch name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string senderParty, string receiverParty, string agreementName, string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send control message to batch.</summary>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <param name="batchName">The batch name.</param>
        /// <param name="controlAction">The control command to send to the batch.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Response>> SendControlMessageAsync(string senderParty, string receiverParty, string agreementName, string batchName, ControlAction controlAction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get batch activation status</summary>
        /// <param name="senderParty">The sender of the agreement.</param>
        /// <param name="receiverParty">The receiver of the agreement.</param>
        /// <param name="agreementName">The agreement name.</param>
        /// <param name="batchName">The batch name.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Response2>> GetBatchActivationStatusAsync(string senderParty, string receiverParty, string agreementName, string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IBusinessProfilesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets business profiles for a Party</summary>
        /// <param name="partyName">Party name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<BusinessProfile>>> GetBusinessProfilesAsync(string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a business profile for a party</summary>
        /// <param name="businessProfile">The business profile.</param>
        /// <param name="partyName">Party name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(BusinessProfile businessProfile, string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Business profile</summary>
        /// <param name="partyName">Party name</param>
        /// <param name="profileName">Profile Name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<BusinessProfile>> GetBusinessProfileAsync(string partyName, string profileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a business profile for a party</summary>
        /// <param name="businessProfile">The business profile.</param>
        /// <param name="partyName">Party name.</param>
        /// <param name="profileName">Profile name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(BusinessProfile businessProfile, string partyName, string profileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a business profile for a party</summary>
        /// <param name="partyName">Party name.</param>
        /// <param name="profileName">Profile name.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string partyName, string profileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create business identity</summary>
        /// <param name="qualifierIdentity">Qualifier identity details</param>
        /// <param name="partyName">Party name</param>
        /// <param name="profileName">Profile name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> AddBusinessIdentityAsync(QualifierIdentity qualifierIdentity, string partyName, string profileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update business identity</summary>
        /// <param name="qualifierIdentity">Qualifier identity details</param>
        /// <param name="partyName">Party name</param>
        /// <param name="profileName">Business profile Name</param>
        /// <param name="id">Business profile id</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateBusinessIdentityAsync(QualifierIdentity qualifierIdentity, string partyName, string profileName, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete business identity</summary>
        /// <param name="partyName">Party name</param>
        /// <param name="profileName">Business profile Name</param>
        /// <param name="id">Business profile id</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteBusinessIdentityAsync(string partyName, string profileName, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IFallbackSettingsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all fallback settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<FallbackSettings>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update fallback settings</summary>
        /// <param name="fallbackSettings">The fallback settings.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(FallbackSettings fallbackSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IGroupClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get group properties</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<GroupProperties>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get group settings</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<GroupSettings>> GetGroupSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update group settings</summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> PutAsync(GroupSettings groupSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IHostInstancesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get host instances</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<HostInstance>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get host instance settings</summary>
        /// <param name="hostName">Name of the host</param>
        /// <param name="serverName">Name of the server on which host instance is running</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<HostInstanceSettings>> GetHostInstanceSettingsAsync(string hostName, string serverName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update host instance settings</summary>
        /// <param name="hostInstanceSettings">Host instance setting object</param>
        /// <param name="hostName">Name of the host</param>
        /// <param name="serverName">Name of the server on which host instance is running</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> PutAsync(HostInstanceSettings hostInstanceSettings, string hostName, string serverName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a host instance</summary>
        /// <param name="hostName">Name of the host</param>
        /// <param name="serverName">Name of the server on which host instance is running</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StartHostInstanceAsync(string hostName, string serverName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop a host instance</summary>
        /// <param name="hostName">Name of the host</param>
        /// <param name="serverName">Name of the server on which host instance is running</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StopHostInstanceAsync(string hostName, string serverName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IHostsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get hosts</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Host>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get host settings</summary>
        /// <param name="hostName">Name of the host</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<HostSettings>> GetHostSettingsAsync(string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update host instance settings</summary>
        /// <param name="hostSettings">Host instance setting object</param>
        /// <param name="hostName">Name of the host</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> PutAsync(HostSettings hostSettings, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IOperationalDataClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Instances</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Instance>>> GetInstancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Terminate instance</summary>
        /// <param name="instanceId">instance Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<object>> TerminateInstanceAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resume instance</summary>
        /// <param name="instanceId">instance Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<object>> ResumeInstanceAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Suspend instance</summary>
        /// <param name="instanceId">instance Id</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<object>> SuspendInstanceAsync(string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Messages</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Message>>> GetMessagesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Subscriptions</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Subscription>>> GetSubscriptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get TrackedMessageEvent</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<TrackedMessageEvent>>> GetTrackedMessageEventAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get TrackedServiceInstance</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<TrackedServiceInstance>>> GetTrackedServiceInstancesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get TransactionSet</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<TransactionSet>>> GetTransactionSetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get TransactionSetAggregationReport</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<TransactionSetAggregationReport>>> GetTransactionSetAggregationReportsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get InterchangeStatusRecords</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<InterchangeStatusRecord>>> GetInterchangeStatusRecordsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get InterchangeAggregationRecords</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<InterchangeAggregationRecord>>> GetInterchangeAggregationRecordsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get AS2StatusRecords</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<AS2StatusRecord>>> GetAS2StatusRecordsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Batches</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Batch>>> GetBatchesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get batch status</summary>
        /// <param name="destinationPartyName">The destination of the oneway agreement.</param>
        /// <param name="batchName">The agreement name.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Response3>> GetBatchStatusAsync(string destinationPartyName, string batchName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IOrchestrationsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all Orchestrations</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Orchestration>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Orchestration. Allows us to Bind/Unbind Ports, Host and Change Tracking Options</summary>
        /// <param name="orchestration">Updated Orchestration Properties</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(Orchestration orchestration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Specific Orchestration</summary>
        /// <param name="applicationName">Name of application</param>
        /// <param name="orchestrationName">Name of Orchestration</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Orchestration>> GetOrchestrationAsync(string applicationName, string orchestrationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Enlist Orchestration</summary>
        /// <param name="applicationName">Application Name</param>
        /// <param name="orchestrationName">Orchestration Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> EnlistOrchestrationAsync(string applicationName, string orchestrationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unenlist Orchestration</summary>
        /// <param name="applicationName">Application Name</param>
        /// <param name="orchestrationName">Orchestration Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UnenlistOrchestrationAsync(string applicationName, string orchestrationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start Orchestration</summary>
        /// <param name="applicationName">Application Name</param>
        /// <param name="orchestrationName">Orchestration Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StartOrchestrationAsync(string applicationName, string orchestrationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop Orchestration</summary>
        /// <param name="applicationName">Application Name</param>
        /// <param name="orchestrationName">Orchestration Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StopOrchestrationAsync(string applicationName, string orchestrationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IPartiesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Parties</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Party>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Party</summary>
        /// <param name="party">Party details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(Party party, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Party</summary>
        /// <param name="partyName">party name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Party>> GetPartyAsync(string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Party</summary>
        /// <param name="party">Party details</param>
        /// <param name="partyName">party name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(Party party, string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a party alias</summary>
        /// <param name="partyAlias">Party Alias details</param>
        /// <param name="partyName">Party Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> AddPartyAliasAsync(PartyAlias partyAlias, string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Party</summary>
        /// <param name="partyName">Party Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string partyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Party alias</summary>
        /// <param name="partyAlias">party alias details</param>
        /// <param name="partyName">Party Name</param>
        /// <param name="partyAliasName">Alias Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdatePartyAliasAsync(PartyAlias partyAlias, string partyName, string partyAliasName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Party alias</summary>
        /// <param name="partyName">Party Name</param>
        /// <param name="partyAliasName">Alias Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeletePartyAliasAsync(string partyName, string partyAliasName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IPipelinesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET Pipelines</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Pipeline>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Details about a specific Pipeline</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Pipeline>> GetPipelineAsync(string pipelineName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Tracking and Description of a Pipeline</summary>
        /// <param name="pipelineName">Name of pipeline to be updated</param>
        /// <param name="pipeline">Pipeline details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(string pipelineName, Pipeline pipeline, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IPoliciesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Policies</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Policy>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deploy Policy</summary>
        /// <param name="policyName">Policy name</param>
        /// <param name="majorVersion">Major version</param>
        /// <param name="minorVersion">Minor Version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeployAsync(string policyName, int majorVersion, int minorVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Undeploy Policy</summary>
        /// <param name="policyName">Policy name</param>
        /// <param name="majorVersion">Major version</param>
        /// <param name="minorVersion">Minor Version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UndeployAsync(string policyName, int majorVersion, int minorVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add policy to an Application</summary>
        /// <param name="applicationName">Application name</param>
        /// <param name="policyName">Policy name</param>
        /// <param name="majorVersion">Major version</param>
        /// <param name="minorVersion">Minor Version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> AddToApplicationAsync(string applicationName, string policyName, int majorVersion, int minorVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove policy from an Application</summary>
        /// <param name="applicationName">Application name</param>
        /// <param name="policyName">Policy name</param>
        /// <param name="majorVersion">Major version</param>
        /// <param name="minorVersion">Minor Version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> RemoveFromApplicationAsync(string applicationName, string policyName, int majorVersion, int minorVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IProtocolTypesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Protocol types</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<ProtocolType>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IReceiveLocationsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Receive Locations</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<ReceiveLocation>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Receive Location</summary>
        /// <param name="receiveLocation">Receive location details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(ReceiveLocation receiveLocation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get receive location of a receive port</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<ReceiveLocation>> GetReceiveLocationAsync(string receivePortName, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Receive Location</summary>
        /// <param name="receivePortName">Receive port name</param>
        /// <param name="receiveLocationName">Receive location name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string receivePortName, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Receive Location</summary>
        /// <param name="receiveLocation">Receive location details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(ReceiveLocation receiveLocation, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set primary receive location</summary>
        /// <param name="receivePortName">Receive port name</param>
        /// <param name="receiveLocationName">Receive location name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> SetPrimaryAsync(string receivePortName, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Enable receive location</summary>
        /// <param name="receivePortName">Receive port name</param>
        /// <param name="receiveLocationName">Receive location name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> EnableAsync(string receivePortName, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Disable receive location</summary>
        /// <param name="receivePortName">Receive port name</param>
        /// <param name="receiveLocationName">Receive location name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DisableAsync(string receivePortName, string receiveLocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IReceivePortsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Receive Ports</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<ReceivePort>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create Receive Port</summary>
        /// <param name="receiveport">Receive port details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(ReceivePort receiveport, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Receive Ports</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<ReceivePort>> GetReceivePortAsync(string receivePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Receive port</summary>
        /// <param name="receiveport">Receive port details</param>
        /// <param name="receivePortName">ReceivePort Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(ReceivePort receiveport, string receivePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Receive port</summary>
        /// <param name="receivePortName">ReceivePort Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string receivePortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IResourcesClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET Resources</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Resource>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IRoleLinksClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Role links</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<RoleLink>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Role link</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<RoleLink>> GetRoleLinkAsync(string applicationName, string roleLinkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add an enlisted party</summary>
        /// <param name="enlistedParties">list of Enlisted party details</param>
        /// <param name="applicationName">Application name</param>
        /// <param name="roleLinkName">Role link name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> AddEnlistedPartiesAsync(System.Collections.Generic.IEnumerable<EnlistedParty> enlistedParties, string applicationName, string roleLinkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>remove an enlisted party</summary>
        /// <param name="partyNames">List of party names</param>
        /// <param name="applicationName">Application name</param>
        /// <param name="roleLinkName">Role link name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> RemoveEnlistedPartiesAsync(System.Collections.Generic.IEnumerable<string> partyNames, string applicationName, string roleLinkName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISchemasClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET Schemas.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Schema>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>GET a schemas by name.</summary>
        /// <param name="schemaName">Name of the schema.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Schema>> GetSchemaAsync(string schemaName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Schema (only tracking options and description)</summary>
        /// <param name="schemaName">Schema Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateTrackingAsync(string schemaName, Schema schema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISendPortGroupsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get SendportGroups</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<SendPortGroup>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create SendPortGroup</summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(SendPortGroup sendPortGroup, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get specific SendPortGroup</summary>
        /// <param name="sendPortGroupName">Name of SendPortGroup</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<SendPortGroup>> GetSendPortGroupAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update specific SendPortGroup</summary>
        /// <param name="sendPortGroup">Details of SendPortGroup</param>
        /// <param name="sendPortGroupName">SendPortGroup Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(SendPortGroup sendPortGroup, string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete SendPortGroup</summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unenlist SendportGroup</summary>
        /// <param name="sendPortGroupName">Send port Group name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UnenlistSendPortGroupAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start Sendport Group</summary>
        /// <param name="sendPortGroupName">Send port Group name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StartSendPortGroupAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop Sendport Group</summary>
        /// <param name="sendPortGroupName">Send port Group name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StopSendPortGroupAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Enlist Sendport Group</summary>
        /// <param name="sendPortGroupName">Send port Group name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> EnlistSendPortGroupAsync(string sendPortGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISendPortsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Sendports</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<SendPort>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a send port</summary>
        /// <param name="btSendPort">Send port details</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> CreateAsync(SendPort btSendPort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Sendport</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<SendPort>> GetSendPortAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Sendport</summary>
        /// <param name="btSendPort">Send port details</param>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UpdateAsync(SendPort btSendPort, string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete send port</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> DeleteAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unenlist Sendport</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> UnenlistSendPortAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start Sendport</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StartSendPortAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Stop Sendport</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> StopSendPortAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Enlist Sendport</summary>
        /// <param name="sendPortName">Send port name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> EnlistSendPortAsync(string sendPortName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ITransformsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all maps</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<System.Collections.Generic.ICollection<Transform>>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get details about a specific transform</summary>
        /// <param name="transformFullName">Full name of the transform</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse<Transform>> GetTransformAsync(string transformFullName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Transform. Only Description can be edited.</summary>
        /// <param name="transformFullName">Transform full name</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientResponse> PutAsync(string transformFullName, Transform transform, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    /// <summary>Model for Agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Agreement 
    {
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets the description.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets the protocol.</summary>
        [Newtonsoft.Json.JsonProperty("Protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protocol { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enabled.</summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }
    
        /// <summary>Gets or sets the start date.</summary>
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }
    
        /// <summary>Gets or sets the end date.</summary>
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        /// <summary>Gets or sets the send partner.</summary>
        [Newtonsoft.Json.JsonProperty("SendPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerAgreementContext SendPartner { get; set; }
    
        /// <summary>Gets or sets the receive partner.</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartnerAgreementContext ReceivePartner { get; set; }
    
        /// <summary>Gets or sets the agreement content.</summary>
        [Newtonsoft.Json.JsonProperty("AgreementContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AgreementContent AgreementContent { get; set; }
    
        /// <summary>Gets or sets the custom settings.</summary>
        [Newtonsoft.Json.JsonProperty("CustomSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomSetting> CustomSettings { get; set; }
    
        /// <summary>Gets or sets the contacts.</summary>
        [Newtonsoft.Json.JsonProperty("Contacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Agreement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Agreement>(data);
        }
    
    }
    
    /// <summary>Model for PartnerAgreementContext</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PartnerAgreementContext 
    {
        /// <summary>Gets or sets the partner.</summary>
        [Newtonsoft.Json.JsonProperty("PartnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerName { get; set; }
    
        /// <summary>Gets or sets the profile.</summary>
        [Newtonsoft.Json.JsonProperty("ProfileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PartnerAgreementContext FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartnerAgreementContext>(data);
        }
    
    }
    
    /// <summary>The agreement content.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AgreementContent 
    {
        /// <summary>Gets or sets the AS2 agreement content.</summary>
        [Newtonsoft.Json.JsonProperty("AS2AgreementContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2AgreementContent AS2AgreementContent { get; set; }
    
        /// <summary>Gets or sets the X12 agreement content.</summary>
        [Newtonsoft.Json.JsonProperty("X12AgreementContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12AgreementContent X12AgreementContent { get; set; }
    
        /// <summary>Gets or sets the EDIFACT agreement content.</summary>
        [Newtonsoft.Json.JsonProperty("EDIFACTAgreementContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTAgreementContent EDIFACTAgreementContent { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AgreementContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AgreementContent>(data);
        }
    
    }
    
    /// <summary>Party Custom setting</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CustomSetting 
    {
        /// <summary>Setting Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Setting value</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CustomSetting FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomSetting>(data);
        }
    
    }
    
    /// <summary>Model for Contact</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Contact 
    {
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets the company.</summary>
        [Newtonsoft.Json.JsonProperty("Company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        /// <summary>Gets or sets the job title.</summary>
        [Newtonsoft.Json.JsonProperty("JobTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobTitle { get; set; }
    
        /// <summary>Gets or sets the email.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Gets or sets the web address.</summary>
        [Newtonsoft.Json.JsonProperty("WebAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebAddress { get; set; }
    
        /// <summary>Gets or sets the business phone.</summary>
        [Newtonsoft.Json.JsonProperty("BusinessPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessPhone { get; set; }
    
        /// <summary>Gets or sets the mobile phone.</summary>
        [Newtonsoft.Json.JsonProperty("MobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhone { get; set; }
    
        /// <summary>Gets or sets the fax.</summary>
        [Newtonsoft.Json.JsonProperty("Fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }
    
        /// <summary>Gets or sets the address.</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Gets or sets the notes.</summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Contact FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contact>(data);
        }
    
    }
    
    /// <summary>Model for AS2 protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2AgreementContent 
    {
        /// <summary>Gets or sets the send agreement.</summary>
        [Newtonsoft.Json.JsonProperty("SendAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2OnewayAgreement SendAgreement { get; set; }
    
        /// <summary>Gets or sets the receive agreement.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2OnewayAgreement ReceiveAgreement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2AgreementContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2AgreementContent>(data);
        }
    
    }
    
    /// <summary>Model for X12 protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12AgreementContent 
    {
        /// <summary>Gets or sets the send agreement.</summary>
        [Newtonsoft.Json.JsonProperty("SendAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12OnewayAgreement SendAgreement { get; set; }
    
        /// <summary>Gets or sets the receive agreement.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12OnewayAgreement ReceiveAgreement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12AgreementContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12AgreementContent>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACT protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTAgreementContent 
    {
        /// <summary>Gets or sets the send agreement.</summary>
        [Newtonsoft.Json.JsonProperty("SendAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTOnewayAgreement SendAgreement { get; set; }
    
        /// <summary>Gets or sets the receive agreement.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveAgreement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTOnewayAgreement ReceiveAgreement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTAgreementContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTAgreementContent>(data);
        }
    
    }
    
    /// <summary>Model for AS2 Oneway Agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2OnewayAgreement 
    {
        /// <summary>Gets or sets the protocol settings.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2ProtocolSettings ProtocolSettings { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the sender business identity.</summary>
        [Newtonsoft.Json.JsonProperty("SenderBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity SenderBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the receive business identity.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity ReceiveBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the send port references.</summary>
        [Newtonsoft.Json.JsonProperty("SendPortNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SendPortNames { get; set; }
    
        /// <summary>Gets or sets the batch descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("BatchDescriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatchDescription> BatchDescriptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2OnewayAgreement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2OnewayAgreement>(data);
        }
    
    }
    
    /// <summary>Model for X12 Oneway Agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12OnewayAgreement 
    {
        /// <summary>Gets or sets the protocol settings.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12ProtocolSettings ProtocolSettings { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the sender business identity.</summary>
        [Newtonsoft.Json.JsonProperty("SenderBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity SenderBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the receive business identity.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity ReceiveBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the send port references.</summary>
        [Newtonsoft.Json.JsonProperty("SendPortNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SendPortNames { get; set; }
    
        /// <summary>Gets or sets the batch descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("BatchDescriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatchDescription> BatchDescriptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12OnewayAgreement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12OnewayAgreement>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACT Oneway Agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTOnewayAgreement 
    {
        /// <summary>Gets or sets the protocol settings.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTProtocolSettings ProtocolSettings { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the sender business identity.</summary>
        [Newtonsoft.Json.JsonProperty("SenderBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity SenderBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the receive business identity.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveBusinessIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity ReceiveBusinessIdentity { get; set; }
    
        /// <summary>Gets or sets the send port references.</summary>
        [Newtonsoft.Json.JsonProperty("SendPortNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SendPortNames { get; set; }
    
        /// <summary>Gets or sets the batch descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("BatchDescriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BatchDescription> BatchDescriptions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTOnewayAgreement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTOnewayAgreement>(data);
        }
    
    }
    
    /// <summary>Model for AS2 protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2ProtocolSettings 
    {
        /// <summary>Gets or sets the message connection settings.</summary>
        [Newtonsoft.Json.JsonProperty("MessageConnectionSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2MessageConnectionSettings MessageConnectionSettings { get; set; }
    
        /// <summary>Gets or sets the validation settings.</summary>
        [Newtonsoft.Json.JsonProperty("ValidationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2ValidationSettings ValidationSettings { get; set; }
    
        /// <summary>Gets or sets the error settings.</summary>
        [Newtonsoft.Json.JsonProperty("ErrorSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2ErrorSettings ErrorSettings { get; set; }
    
        /// <summary>Gets or sets the mdn settings.</summary>
        [Newtonsoft.Json.JsonProperty("MDNSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2MDNSettings MDNSettings { get; set; }
    
        /// <summary>Gets or sets the envelope settings.</summary>
        [Newtonsoft.Json.JsonProperty("EnvelopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2EnvelopeSettings EnvelopeSettings { get; set; }
    
        /// <summary>Gets or sets the security settings.</summary>
        [Newtonsoft.Json.JsonProperty("SecuritySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2SecuritySettings SecuritySettings { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment connection settings.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentConnectionSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AS2AcknowledgmentConnectionSettings AcknowledgmentConnectionSettings { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the protocol name.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }
    
        /// <summary>Gets or sets the settings name.</summary>
        [Newtonsoft.Json.JsonProperty("SettingsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2ProtocolSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2ProtocolSettings>(data);
        }
    
    }
    
    /// <summary>Model for QualifierIdentity</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class QualifierIdentity 
    {
        /// <summary>Gets or sets the description.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets the qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("Qualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qualifier { get; set; }
    
        /// <summary>Gets or sets the value.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static QualifierIdentity FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QualifierIdentity>(data);
        }
    
    }
    
    /// <summary>Model for BatchDescription</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BatchDescription 
    {
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }
    
        /// <summary>Gets or sets the name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets the description.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets the protocol.</summary>
        [Newtonsoft.Json.JsonProperty("Protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Protocol { get; set; }
    
        /// <summary>Gets or sets the start date.</summary>
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }
    
        /// <summary>Gets or sets the end date.</summary>
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        /// <summary>Gets or sets the termination count.</summary>
        [Newtonsoft.Json.JsonProperty("TerminationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TerminationCount { get; set; }
    
        /// <summary>Gets or sets the filter predicate.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterPredicate Filter { get; set; }
    
        /// <summary>Gets or sets the message count release criteria</summary>
        [Newtonsoft.Json.JsonProperty("MessageCountRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageCountReleaseCriteria MessageCountRelease { get; set; }
    
        /// <summary>Gets or sets the manual release criteria</summary>
        [Newtonsoft.Json.JsonProperty("ManualRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManualReleaseCriteria ManualRelease { get; set; }
    
        /// <summary>Gets or sets the interchange size release criteria</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeSizeRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InterchangeSizeReleaseCriteria InterchangeSizeRelease { get; set; }
    
        /// <summary>Gets or sets the time-based release criteria</summary>
        [Newtonsoft.Json.JsonProperty("TimeBasedRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeBasedReleaseCriteria TimeBasedRelease { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BatchDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BatchDescription>(data);
        }
    
    }
    
    /// <summary>Model for X12 protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12ProtocolSettings 
    {
        /// <summary>Gets or sets the validation settings.</summary>
        [Newtonsoft.Json.JsonProperty("ValidationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12ValidationSettings ValidationSettings { get; set; }
    
        /// <summary>Gets or sets the framing settings.</summary>
        [Newtonsoft.Json.JsonProperty("FramingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12FramingSettings FramingSettings { get; set; }
    
        /// <summary>Gets or sets the envelope settings.</summary>
        [Newtonsoft.Json.JsonProperty("EnvelopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12EnvelopeSettings EnvelopeSettings { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment settings.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12AcknowledgmentSettings AcknowledgmentSettings { get; set; }
    
        /// <summary>Gets or sets the message filter.</summary>
        [Newtonsoft.Json.JsonProperty("MessageFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12MessageFilter MessageFilter { get; set; }
    
        /// <summary>Gets or sets the security settings.</summary>
        [Newtonsoft.Json.JsonProperty("SecuritySettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12SecuritySettings SecuritySettings { get; set; }
    
        /// <summary>Gets or sets the processing settings.</summary>
        [Newtonsoft.Json.JsonProperty("ProcessingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12ProcessingSettings ProcessingSettings { get; set; }
    
        /// <summary>Gets or sets the schema settings.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12SchemaSettings SchemaSettings { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the protocol name.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }
    
        /// <summary>Gets or sets the settings name.</summary>
        [Newtonsoft.Json.JsonProperty("SettingsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12ProtocolSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12ProtocolSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACT protocol settings in an agreement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTProtocolSettings 
    {
        /// <summary>Gets or sets the validation settings.</summary>
        [Newtonsoft.Json.JsonProperty("ValidationSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTValidationSettings ValidationSettings { get; set; }
    
        /// <summary>Gets or sets the framing settings.</summary>
        [Newtonsoft.Json.JsonProperty("FramingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTFramingSettings FramingSettings { get; set; }
    
        /// <summary>Gets or sets the envelope settings.</summary>
        [Newtonsoft.Json.JsonProperty("EnvelopeSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTEnvelopeSettings EnvelopeSettings { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment settings.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTAcknowledgmentSettings AcknowledgmentSettings { get; set; }
    
        /// <summary>Gets or sets the message filter.</summary>
        [Newtonsoft.Json.JsonProperty("MessageFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTMessageFilter MessageFilter { get; set; }
    
        /// <summary>Gets or sets the processing settings.</summary>
        [Newtonsoft.Json.JsonProperty("ProcessingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTProcessingSettings ProcessingSettings { get; set; }
    
        /// <summary>Gets or sets the processing settings.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTSchemaSettings SchemaSettings { get; set; }
    
        /// <summary>Gets or sets a value indicating whether is test interchange.</summary>
        [Newtonsoft.Json.JsonProperty("IsTestInterchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTestInterchange { get; set; }
    
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the protocol name.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }
    
        /// <summary>Gets or sets the settings name.</summary>
        [Newtonsoft.Json.JsonProperty("SettingsName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SettingsName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTProtocolSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTProtocolSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2MessageConnectionSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2MessageConnectionSettings 
    {
        /// <summary>Gets or sets a value indicating whether ignore certificate name mismatch.</summary>
        [Newtonsoft.Json.JsonProperty("IgnoreCertificateNameMismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreCertificateNameMismatch { get; set; }
    
        /// <summary>Gets or sets a value indicating whether http expect 100 continue supported.</summary>
        [Newtonsoft.Json.JsonProperty("HttpExpect100ContinueSupported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HttpExpect100ContinueSupported { get; set; }
    
        /// <summary>Gets or sets a value indicating whether keep http connection alive.</summary>
        [Newtonsoft.Json.JsonProperty("KeepHttpConnectionAlive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? KeepHttpConnectionAlive { get; set; }
    
        /// <summary>Gets or sets a value indicating whether unfold http headers.</summary>
        [Newtonsoft.Json.JsonProperty("UnfoldHttpHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnfoldHttpHeaders { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2MessageConnectionSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2MessageConnectionSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2ValidationSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2ValidationSettings 
    {
        /// <summary>Gets or sets a value indicating whether message encrypted.</summary>
        [Newtonsoft.Json.JsonProperty("MessageEncrypted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageEncrypted { get; set; }
    
        /// <summary>Gets or sets a value indicating whether message signed.</summary>
        [Newtonsoft.Json.JsonProperty("MessageSigned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageSigned { get; set; }
    
        /// <summary>Gets or sets a value indicating whether message compressed.</summary>
        [Newtonsoft.Json.JsonProperty("MessageCompressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageCompressed { get; set; }
    
        /// <summary>Gets or sets the encryption algorithm.</summary>
        [Newtonsoft.Json.JsonProperty("EncryptionAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncryptionAlgorithm { get; set; }
    
        /// <summary>Gets or sets a value indicating whether check certificate revocation list on send.</summary>
        [Newtonsoft.Json.JsonProperty("CheckCertificateRevocationListOnSend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckCertificateRevocationListOnSend { get; set; }
    
        /// <summary>Gets or sets a value indicating whether check certificate revocation list on receive.</summary>
        [Newtonsoft.Json.JsonProperty("CheckCertificateRevocationListOnReceive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckCertificateRevocationListOnReceive { get; set; }
    
        /// <summary>Gets or sets a value indicating whether check duplicate message.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateMessage { get; set; }
    
        /// <summary>Gets or sets the interchange duplicates validity.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeDuplicatesValidity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeDuplicatesValidity { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to override message properties.</summary>
        [Newtonsoft.Json.JsonProperty("OverrideMessageProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideMessageProperties { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2ValidationSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2ValidationSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2ErrorSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2ErrorSettings 
    {
        /// <summary>Gets or sets a value indicating whether suspend duplicate message.</summary>
        [Newtonsoft.Json.JsonProperty("SuspendDuplicateMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuspendDuplicateMessage { get; set; }
    
        /// <summary>Gets or sets a value indicating whether resend if mdn not received.</summary>
        [Newtonsoft.Json.JsonProperty("ResendIfMDNNotReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ResendIfMDNNotReceived { get; set; }
    
        /// <summary>Gets or sets the max resend attempts.</summary>
        [Newtonsoft.Json.JsonProperty("MaxResendAttempts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxResendAttempts { get; set; }
    
        /// <summary>Gets or sets the resend timeout.</summary>
        [Newtonsoft.Json.JsonProperty("ResendTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResendTimeout { get; set; }
    
        /// <summary>Gets or sets the http retry timeout.</summary>
        [Newtonsoft.Json.JsonProperty("HttpRetryTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HttpRetryTimeout { get; set; }
    
        /// <summary>Gets or sets a value indicating whether override send port.</summary>
        [Newtonsoft.Json.JsonProperty("OverrideSendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideSendPort { get; set; }
    
        /// <summary>Gets or sets the minimum http retry interval.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumHttpRetryInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumHttpRetryInterval { get; set; }
    
        /// <summary>Gets or sets the maximum http retry attempts.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumHttpRetryAttempts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumHttpRetryAttempts { get; set; }
    
        /// <summary>Gets or sets the minimum resend interval.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumResendInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinimumResendInterval { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2ErrorSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2ErrorSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2MDNSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2MDNSettings 
    {
        /// <summary>Gets or sets a value indicating whether to process mdn to msg box.</summary>
        [Newtonsoft.Json.JsonProperty("ProcessMDNtoMsgBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProcessMDNtoMsgBox { get; set; }
    
        /// <summary>Gets or sets a value indicating whether mdn is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedMDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedMDN { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to sign mdn.</summary>
        [Newtonsoft.Json.JsonProperty("SignMDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SignMDN { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to send mdn asynchronously.</summary>
        [Newtonsoft.Json.JsonProperty("SendMDNAsynchronously", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendMDNAsynchronously { get; set; }
    
        /// <summary>Gets or sets the receipt delivery url.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiptDeliveryUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptDeliveryUrl { get; set; }
    
        /// <summary>Gets or sets the disposition notification to.</summary>
        [Newtonsoft.Json.JsonProperty("DispositionNotificationTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DispositionNotificationTo { get; set; }
    
        /// <summary>Gets or sets a value indicating whether sign outbound mdn if optional.</summary>
        [Newtonsoft.Json.JsonProperty("SignOutboundMDNIfOptional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SignOutboundMDNIfOptional { get; set; }
    
        /// <summary>Gets or sets the mdn text.</summary>
        [Newtonsoft.Json.JsonProperty("MDNText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MDNText { get; set; }
    
        /// <summary>Gets or sets the mic hashing algorithm.</summary>
        [Newtonsoft.Json.JsonProperty("MicHashingAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MicHashingAlgorithm { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2MDNSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2MDNSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2EnvelopeSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2EnvelopeSettings 
    {
        /// <summary>Gets or sets a value indicating whether transmit file name in mime header.</summary>
        [Newtonsoft.Json.JsonProperty("TransmitFileNameInMimeHeader", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransmitFileNameInMimeHeader { get; set; }
    
        /// <summary>Gets or sets the file name template.</summary>
        [Newtonsoft.Json.JsonProperty("FileNameTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameTemplate { get; set; }
    
        /// <summary>Gets or sets a value indicating whether suspend message on file name generation error.</summary>
        [Newtonsoft.Json.JsonProperty("SuspendMessageOnFileNameGenerationError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuspendMessageOnFileNameGenerationError { get; set; }
    
        /// <summary>Gets or sets a value indicating whether autogenerate file name.</summary>
        [Newtonsoft.Json.JsonProperty("AutogenerateFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutogenerateFileName { get; set; }
    
        /// <summary>Gets or sets the message content type.</summary>
        [Newtonsoft.Json.JsonProperty("MessageContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageContentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2EnvelopeSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2EnvelopeSettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2SecuritySettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2SecuritySettings 
    {
        /// <summary>Gets or sets a value indicating whether override group signing certificate.</summary>
        [Newtonsoft.Json.JsonProperty("OverrideGroupSigningCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideGroupSigningCertificate { get; set; }
    
        /// <summary>Gets or sets the signing certificate name.</summary>
        [Newtonsoft.Json.JsonProperty("SigningCertificateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SigningCertificateName { get; set; }
    
        /// <summary>Gets or sets the signing certificate thumbprint.</summary>
        [Newtonsoft.Json.JsonProperty("SigningCertificateThumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SigningCertificateThumbprint { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for inbound encoded messages.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForInboundEncodedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForInboundEncodedMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for inbound decoded messages.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForInboundDecodedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForInboundDecodedMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for outbound mdn.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForOutboundMDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForOutboundMDN { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for outbound encoded messages.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForOutboundEncodedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForOutboundEncodedMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for outbound decoded messages.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForOutboundDecodedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForOutboundDecodedMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enable nrr for inbound mdn.</summary>
        [Newtonsoft.Json.JsonProperty("EnableNRRForInboundMDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableNRRForInboundMDN { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2SecuritySettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2SecuritySettings>(data);
        }
    
    }
    
    /// <summary>Model for AS2AcknowledgmentConnectionSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2AcknowledgmentConnectionSettings 
    {
        /// <summary>Gets or sets a value indicating whether ack ignore certificate name mismatch.</summary>
        [Newtonsoft.Json.JsonProperty("AckIgnoreCertificateNameMismatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AckIgnoreCertificateNameMismatch { get; set; }
    
        /// <summary>Gets or sets a value indicating whether ack http expect 100 continue.</summary>
        [Newtonsoft.Json.JsonProperty("AckHttpExpect100Continue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AckHttpExpect100Continue { get; set; }
    
        /// <summary>Gets or sets a value indicating whether ack keep http connection alive.</summary>
        [Newtonsoft.Json.JsonProperty("AckKeepHttpConnectionAlive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AckKeepHttpConnectionAlive { get; set; }
    
        /// <summary>Gets or sets a value indicating whether ack unfold http headers.</summary>
        [Newtonsoft.Json.JsonProperty("AckUnfoldHttpHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AckUnfoldHttpHeaders { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2AcknowledgmentConnectionSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2AcknowledgmentConnectionSettings>(data);
        }
    
    }
    
    /// <summary>Model for FilterGroup</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FilterPredicate 
    {
        /// <summary>Gets or sets the groups.</summary>
        [Newtonsoft.Json.JsonProperty("Groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterGroup> Groups { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FilterPredicate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterPredicate>(data);
        }
    
    }
    
    /// <summary>Model for MessageCountReleaseCriteria</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MessageCountReleaseCriteria 
    {
        /// <summary>Gets or sets the message scope.</summary>
        [Newtonsoft.Json.JsonProperty("MessageScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageScope { get; set; }
    
        /// <summary>Gets or sets the message count.</summary>
        [Newtonsoft.Json.JsonProperty("MessageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessageCountReleaseCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageCountReleaseCriteria>(data);
        }
    
    }
    
    /// <summary>Model for ManualReleaseCriteria</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ManualReleaseCriteria 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ManualReleaseCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManualReleaseCriteria>(data);
        }
    
    }
    
    /// <summary>Model for InterchangeSizeReleaseCriteria</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InterchangeSizeReleaseCriteria 
    {
        /// <summary>Gets or sets the character count.</summary>
        [Newtonsoft.Json.JsonProperty("CharacterCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CharacterCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static InterchangeSizeReleaseCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InterchangeSizeReleaseCriteria>(data);
        }
    
    }
    
    /// <summary>Model for TimeBasedReleaseCriteria</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TimeBasedReleaseCriteria 
    {
        /// <summary>Gets or sets the recurrence schedule.</summary>
        [Newtonsoft.Json.JsonProperty("WeeklyRecurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WeeklyRecurrence WeeklyRecurrence { get; set; }
    
        /// <summary>Gets or sets the recurrence schedule.</summary>
        [Newtonsoft.Json.JsonProperty("HourlyRecurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HourlyRecurrence HourlyRecurrence { get; set; }
    
        /// <summary>Gets or sets the recurrence schedule.</summary>
        [Newtonsoft.Json.JsonProperty("DailyRecurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DailyRecurrence DailyRecurrence { get; set; }
    
        /// <summary>Gets or sets the first release datetime.</summary>
        [Newtonsoft.Json.JsonProperty("FirstRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstRelease { get; set; }
    
        /// <summary>Gets or sets a value indicating whether send empty batch signal.</summary>
        [Newtonsoft.Json.JsonProperty("SendEmptyBatchSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendEmptyBatchSignal { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TimeBasedReleaseCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeBasedReleaseCriteria>(data);
        }
    
    }
    
    /// <summary>Model for X12ValidationSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12ValidationSettings 
    {
        /// <summary>Gets or sets a value indicating whether to validate character set in the message.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateCharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateCharacterSet { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateInterchangeControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateInterchangeControlNumber { get; set; }
    
        /// <summary>Gets or sets the validity period of interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberValidityPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeControlNumberValidityPeriod { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate group control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateGroupControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateGroupControlNumber { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate transaction set control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateTransactionSetControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateTransactionSetControlNumber { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to Whether to validate EDI types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateEDITypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateEDITypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to Whether to validate XSD types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateXSDTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateXSDTypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to allow leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("AllowLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to trim leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("TrimLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets the trailing separator policy.</summary>
        [Newtonsoft.Json.JsonProperty("TrailingSeparatorPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrailingSeparatorPolicy { get; set; }
    
        /// <summary>Gets or sets the schema overrides.</summary>
        [Newtonsoft.Json.JsonProperty("ValidationOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<X12ValidationOverrides> ValidationOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12ValidationSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12ValidationSettings>(data);
        }
    
    }
    
    /// <summary>Model for X12FramingSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12FramingSettings 
    {
        /// <summary>Gets or sets the data element separator.</summary>
        [Newtonsoft.Json.JsonProperty("DataElementSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DataElementSeparator { get; set; }
    
        /// <summary>Gets or sets the component separator.</summary>
        [Newtonsoft.Json.JsonProperty("ComponentSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ComponentSeparator { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to replace separators in payload.</summary>
        [Newtonsoft.Json.JsonProperty("ReplaceSeparatorsInPayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReplaceSeparatorsInPayload { get; set; }
    
        /// <summary>Gets or sets the replacement character.</summary>
        [Newtonsoft.Json.JsonProperty("ReplaceCharacter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReplaceCharacter { get; set; }
    
        /// <summary>Gets or sets the segment terminator.</summary>
        [Newtonsoft.Json.JsonProperty("SegmentTerminator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SegmentTerminator { get; set; }
    
        /// <summary>Gets or sets the X12 character set.</summary>
        [Newtonsoft.Json.JsonProperty("CharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CharacterSet { get; set; }
    
        /// <summary>Gets or sets the segment terminator suffix.</summary>
        [Newtonsoft.Json.JsonProperty("SegmentTerminatorSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentTerminatorSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12FramingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12FramingSettings>(data);
        }
    
    }
    
    /// <summary>Model for X12EnvelopeSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12EnvelopeSettings 
    {
        /// <summary>Gets or sets the controls standards id.</summary>
        [Newtonsoft.Json.JsonProperty("ControlStandardsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ControlStandardsId { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to use control standards id as repetition character.</summary>
        [Newtonsoft.Json.JsonProperty("UseControlStandardsIdAsRepetitionCharacter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseControlStandardsIdAsRepetitionCharacter { get; set; }
    
        /// <summary>Gets or sets the sender application id.</summary>
        [Newtonsoft.Json.JsonProperty("SenderApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderApplicationId { get; set; }
    
        /// <summary>Gets or sets the receiver application id.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverApplicationId { get; set; }
    
        /// <summary>Gets or sets the control version number.</summary>
        [Newtonsoft.Json.JsonProperty("ControlVersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlVersionNumber { get; set; }
    
        /// <summary>Gets or sets the interchange control number lower bound</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the interchange  control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InterchangeControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to enable default group headers.</summary>
        [Newtonsoft.Json.JsonProperty("EnableDefaultGroupHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableDefaultGroupHeaders { get; set; }
    
        /// <summary>Gets or sets the functional group id.</summary>
        [Newtonsoft.Json.JsonProperty("FunctionalGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalGroupId { get; set; }
    
        /// <summary>Gets or sets the group control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the group control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover group control number.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets the group header agency code.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderAgencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderAgencyCode { get; set; }
    
        /// <summary>Gets or sets the group header version.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderVersion { get; set; }
    
        /// <summary>Gets or sets the transaction set control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TransactionSetControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the transaction set control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TransactionSetControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover transaction set control number.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransactionSetControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets the transaction set control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the transaction set control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to overwrite existing transaction set control number</summary>
        [Newtonsoft.Json.JsonProperty("OverwriteExistingTransactionSetControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverwriteExistingTransactionSetControlNumber { get; set; }
    
        /// <summary>Gets or sets the group header date format.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderDateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderDateFormat { get; set; }
    
        /// <summary>Gets or sets the group header time format.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderTimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderTimeFormat { get; set; }
    
        /// <summary>Gets or sets the usage indicator.</summary>
        [Newtonsoft.Json.JsonProperty("UsageIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsageIndicator { get; set; }
    
        /// <summary>Gets or sets the envelope overrides.</summary>
        [Newtonsoft.Json.JsonProperty("EnvelopeOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<X12EnvelopeOverrides> EnvelopeOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12EnvelopeSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12EnvelopeSettings>(data);
        }
    
    }
    
    /// <summary>Model for X12AcknowledgmentSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12AcknowledgmentSettings 
    {
        /// <summary>Gets or sets a value indicating whether technical acknowledgment is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedTechnicalAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedTechnicalAcknowledgment { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to batch the technical Acknowledgments.</summary>
        [Newtonsoft.Json.JsonProperty("BatchTechnicalAcknowledgments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BatchTechnicalAcknowledgments { get; set; }
    
        /// <summary>Gets or sets a value indicating whether functional Acknowledgment is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedFunctionalAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedFunctionalAcknowledgment { get; set; }
    
        /// <summary>Gets or sets the functional Acknowledgment version.</summary>
        [Newtonsoft.Json.JsonProperty("FunctionalAcknowledgmentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalAcknowledgmentVersion { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to batch functional Acknowledgments.</summary>
        [Newtonsoft.Json.JsonProperty("BatchFunctionalAcknowledgments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BatchFunctionalAcknowledgments { get; set; }
    
        /// <summary>Gets or sets a value indicating whether implementation Acknowledgment is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedImplementationAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedImplementationAcknowledgment { get; set; }
    
        /// <summary>Gets or sets the implementation Acknowledgment version.</summary>
        [Newtonsoft.Json.JsonProperty("ImplementationAcknowledgmentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImplementationAcknowledgmentVersion { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to batch implementation Acknowledgments.</summary>
        [Newtonsoft.Json.JsonProperty("BatchImplementationAcknowledgments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BatchImplementationAcknowledgments { get; set; }
    
        /// <summary>Gets or sets a value indicating whether a loop is needed for valid messages.</summary>
        [Newtonsoft.Json.JsonProperty("NeedLoopForValidMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedLoopForValidMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to send synchronous Acknowledgment.</summary>
        [Newtonsoft.Json.JsonProperty("SendSynchronousAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendSynchronousAcknowledgment { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcknowledgmentControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcknowledgmentControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcknowledgmentControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcknowledgmentControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover Acknowledgment control number</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcknowledgmentControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets a value indicating whether generate pat a k 901.</summary>
        [Newtonsoft.Json.JsonProperty("GeneratePatAK901", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GeneratePatAK901 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12AcknowledgmentSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12AcknowledgmentSettings>(data);
        }
    
    }
    
    /// <summary>Model for X12MessageFilter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12MessageFilter 
    {
        /// <summary>Gets or sets the message filter type.</summary>
        [Newtonsoft.Json.JsonProperty("MessageFilterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageFilterType { get; set; }
    
        /// <summary>Gets or sets the filter messages.</summary>
        [Newtonsoft.Json.JsonProperty("FilterMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<X12MessageIdentifier> FilterMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12MessageFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12MessageFilter>(data);
        }
    
    }
    
    /// <summary>Model for X12SecuritySettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12SecuritySettings 
    {
        /// <summary>Gets or sets the authorization qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorizationQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationQualifier { get; set; }
    
        /// <summary>Gets or sets the authorization value.</summary>
        [Newtonsoft.Json.JsonProperty("AuthorizationValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationValue { get; set; }
    
        /// <summary>Gets or sets the security qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("SecurityQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityQualifier { get; set; }
    
        /// <summary>Gets or sets the password value.</summary>
        [Newtonsoft.Json.JsonProperty("PasswordValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PasswordValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12SecuritySettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12SecuritySettings>(data);
        }
    
    }
    
    /// <summary>Model for X12ProcessingSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12ProcessingSettings 
    {
        /// <summary>Gets or sets a value indicating whether to mask security information.</summary>
        [Newtonsoft.Json.JsonProperty("MaskSecurityInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MaskSecurityInfo { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to convert numerical type to implied decimal.</summary>
        [Newtonsoft.Json.JsonProperty("ConvertImpliedDecimal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConvertImpliedDecimal { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to preserve interchange.</summary>
        [Newtonsoft.Json.JsonProperty("PreserveInterchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreserveInterchange { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to suspend interchange on error.</summary>
        [Newtonsoft.Json.JsonProperty("SuspendInterchangeOnError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuspendInterchangeOnError { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to create empty xml tags for trailing separators.</summary>
        [Newtonsoft.Json.JsonProperty("CreateEmptyXmlTagsForTrailingSeparators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateEmptyXmlTagsForTrailingSeparators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12ProcessingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12ProcessingSettings>(data);
        }
    
    }
    
    /// <summary>Model for X12SchemaSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12SchemaSettings 
    {
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        /// <summary>Gets or sets the schema overrides.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<X12SchemaOverrides> SchemaOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12SchemaSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12SchemaSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTValidationSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTValidationSettings 
    {
        /// <summary>Gets or sets a value indicating whether to validate character set in the message.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateCharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateCharacterSet { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateInterchangeControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateInterchangeControlNumber { get; set; }
    
        /// <summary>Gets or sets the validity period of interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberValidityPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeControlNumberValidityPeriod { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate group control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateGroupControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateGroupControlNumber { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to check for duplicate transaction set control number.</summary>
        [Newtonsoft.Json.JsonProperty("CheckDuplicateTransactionSetControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CheckDuplicateTransactionSetControlNumber { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to Whether to validate EDI types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateEDITypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateEDITypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to Whether to validate XSD types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateXSDTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateXSDTypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to allow leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("AllowLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to trim leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("TrimLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets the trailing separator policy.</summary>
        [Newtonsoft.Json.JsonProperty("TrailingSeparatorPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrailingSeparatorPolicy { get; set; }
    
        /// <summary>Gets or sets the schema overrides.</summary>
        [Newtonsoft.Json.JsonProperty("ValidationOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EDIFACTValidationOverrides> ValidationOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTValidationSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTValidationSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTFramingSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTFramingSettings 
    {
        /// <summary>Gets or sets the service code list directory version.</summary>
        [Newtonsoft.Json.JsonProperty("ServiceCodeListDirectoryVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceCodeListDirectoryVersion { get; set; }
    
        /// <summary>Gets or sets the character encoding.</summary>
        [Newtonsoft.Json.JsonProperty("CharacterEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CharacterEncoding { get; set; }
    
        /// <summary>Gets or sets the protocol version.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProtocolVersion { get; set; }
    
        /// <summary>Gets or sets the data element separator.</summary>
        [Newtonsoft.Json.JsonProperty("DataElementSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DataElementSeparator { get; set; }
    
        /// <summary>Gets or sets the component separator.</summary>
        [Newtonsoft.Json.JsonProperty("ComponentSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ComponentSeparator { get; set; }
    
        /// <summary>Gets or sets the segment terminator.</summary>
        [Newtonsoft.Json.JsonProperty("SegmentTerminator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SegmentTerminator { get; set; }
    
        /// <summary>Gets or sets the release indicator.</summary>
        [Newtonsoft.Json.JsonProperty("ReleaseIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReleaseIndicator { get; set; }
    
        /// <summary>Gets or sets the repetition separator.</summary>
        [Newtonsoft.Json.JsonProperty("RepetitionSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RepetitionSeparator { get; set; }
    
        /// <summary>Gets or sets the EDIFACT character set.</summary>
        [Newtonsoft.Json.JsonProperty("CharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CharacterSet { get; set; }
    
        /// <summary>Gets or sets the decimal point indicator.</summary>
        [Newtonsoft.Json.JsonProperty("DecimalPointIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DecimalPointIndicator { get; set; }
    
        /// <summary>Gets or sets the segment terminator suffix.</summary>
        [Newtonsoft.Json.JsonProperty("SegmentTerminatorSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentTerminatorSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTFramingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTFramingSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTEnvelopeSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTEnvelopeSettings 
    {
        /// <summary>Gets or sets the application reference id.</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationReferenceId { get; set; }
    
        /// <summary>Gets or sets a value indicating whether apply delimiter string advice.</summary>
        [Newtonsoft.Json.JsonProperty("ApplyDelimiterStringAdvice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApplyDelimiterStringAdvice { get; set; }
    
        /// <summary>Gets or sets the communication agreement id.</summary>
        [Newtonsoft.Json.JsonProperty("CommunicationAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunicationAgreementId { get; set; }
    
        /// <summary>Gets or sets a value indicating whether create grouping segments.</summary>
        [Newtonsoft.Json.JsonProperty("CreateGroupingSegments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateGroupingSegments { get; set; }
    
        /// <summary>Gets or sets the group application password.</summary>
        [Newtonsoft.Json.JsonProperty("GroupApplicationPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupApplicationPassword { get; set; }
    
        /// <summary>Gets or sets the group application receiver id.</summary>
        [Newtonsoft.Json.JsonProperty("GroupApplicationReceiverId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupApplicationReceiverId { get; set; }
    
        /// <summary>Gets or sets the group application receiver qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("GroupApplicationReceiverQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupApplicationReceiverQualifier { get; set; }
    
        /// <summary>Gets or sets the group application sender id.</summary>
        [Newtonsoft.Json.JsonProperty("GroupApplicationSenderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupApplicationSenderId { get; set; }
    
        /// <summary>Gets or sets the group application sender qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("GroupApplicationSenderQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupApplicationSenderQualifier { get; set; }
    
        /// <summary>Gets or sets the group association assigned code.</summary>
        [Newtonsoft.Json.JsonProperty("GroupAssociationAssignedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupAssociationAssignedCode { get; set; }
    
        /// <summary>Gets or sets the group controlling agency code.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControllingAgencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupControllingAgencyCode { get; set; }
    
        /// <summary>Gets or sets the group control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the group control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets the group message release.</summary>
        [Newtonsoft.Json.JsonProperty("GroupMessageRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupMessageRelease { get; set; }
    
        /// <summary>Gets or sets the group message version.</summary>
        [Newtonsoft.Json.JsonProperty("GroupMessageVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupMessageVersion { get; set; }
    
        /// <summary>Gets or sets the interchange control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the interchange control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets a value indicating whether is test interchange.</summary>
        [Newtonsoft.Json.JsonProperty("IsTestInterchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTestInterchange { get; set; }
    
        /// <summary>Gets or sets the processing priority code.</summary>
        [Newtonsoft.Json.JsonProperty("ProcessingPriorityCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingPriorityCode { get; set; }
    
        /// <summary>Gets or sets the receiver internal identification.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverInternalIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverInternalIdentification { get; set; }
    
        /// <summary>Gets or sets the receiver internal sub identification.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverInternalSubIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverInternalSubIdentification { get; set; }
    
        /// <summary>Gets or sets the receiver reverse routing address.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverReverseRoutingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverReverseRoutingAddress { get; set; }
    
        /// <summary>Gets or sets the recipient reference password qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("RecipientReferencePasswordQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientReferencePasswordQualifier { get; set; }
    
        /// <summary>Gets or sets the recipient reference password value.</summary>
        [Newtonsoft.Json.JsonProperty("RecipientReferencePasswordValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecipientReferencePasswordValue { get; set; }
    
        /// <summary>Gets or sets the sender internal identification.</summary>
        [Newtonsoft.Json.JsonProperty("SenderInternalIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderInternalIdentification { get; set; }
    
        /// <summary>Gets or sets the sender internal sub identification.</summary>
        [Newtonsoft.Json.JsonProperty("SenderInternalSubIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderInternalSubIdentification { get; set; }
    
        /// <summary>Gets or sets the sender reverse routing address.</summary>
        [Newtonsoft.Json.JsonProperty("SenderReverseRoutingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderReverseRoutingAddress { get; set; }
    
        /// <summary>Gets or sets the interchange control number lower bound</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InterchangeControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the interchange  control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InterchangeControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover interchange control number.</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InterchangeControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to enable default group headers.</summary>
        [Newtonsoft.Json.JsonProperty("EnableDefaultGroupHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableDefaultGroupHeaders { get; set; }
    
        /// <summary>Gets or sets the functional group id.</summary>
        [Newtonsoft.Json.JsonProperty("FunctionalGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalGroupId { get; set; }
    
        /// <summary>Gets or sets the group control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the group control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GroupControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover group control number.</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets the transaction set control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TransactionSetControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the transaction set control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TransactionSetControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover transaction set control number.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransactionSetControlNumberRollover { get; set; }
    
        /// <summary>Gets or sets the transaction set control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the transaction set control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to overwrite existing transaction set control number</summary>
        [Newtonsoft.Json.JsonProperty("OverwriteExistingTransactionSetControlNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverwriteExistingTransactionSetControlNumber { get; set; }
    
        /// <summary>Gets or sets the envelope overrides.</summary>
        [Newtonsoft.Json.JsonProperty("EnvelopeOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EDIFACTEnvelopeOverrides> EnvelopeOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTEnvelopeSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTEnvelopeSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTAcknowledgmentSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTAcknowledgmentSettings 
    {
        /// <summary>Gets or sets a value indicating whether technical acknowledgment is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedTechnicalAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedTechnicalAcknowledgment { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to batch the technical Acknowledgments.</summary>
        [Newtonsoft.Json.JsonProperty("BatchTechnicalAcknowledgments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BatchTechnicalAcknowledgments { get; set; }
    
        /// <summary>Gets or sets a value indicating whether functional Acknowledgment is needed.</summary>
        [Newtonsoft.Json.JsonProperty("NeedFunctionalAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedFunctionalAcknowledgment { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to batch functional Acknowledgments.</summary>
        [Newtonsoft.Json.JsonProperty("BatchFunctionalAcknowledgments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BatchFunctionalAcknowledgments { get; set; }
    
        /// <summary>Gets or sets a value indicating whether a loop is needed for valid messages.</summary>
        [Newtonsoft.Json.JsonProperty("NeedLoopForValidMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NeedLoopForValidMessages { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to send synchronous Acknowledgment.</summary>
        [Newtonsoft.Json.JsonProperty("SendSynchronousAcknowledgment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SendSynchronousAcknowledgment { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number prefix.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcknowledgmentControlNumberPrefix { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number suffix.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcknowledgmentControlNumberSuffix { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number lower bound.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberLowerBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AcknowledgmentControlNumberLowerBound { get; set; }
    
        /// <summary>Gets or sets the Acknowledgment control number upper bound.</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberUpperBound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AcknowledgmentControlNumberUpperBound { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to rollover Acknowledgment control number</summary>
        [Newtonsoft.Json.JsonProperty("AcknowledgmentControlNumberRollover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcknowledgmentControlNumberRollover { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTAcknowledgmentSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTAcknowledgmentSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTMessageFilter</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTMessageFilter 
    {
        /// <summary>Gets or sets the message filter type.</summary>
        [Newtonsoft.Json.JsonProperty("MessageFilterType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageFilterType { get; set; }
    
        /// <summary>Gets or sets the filter messages.</summary>
        [Newtonsoft.Json.JsonProperty("FilterMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EDIFACTMessageIdentifier> FilterMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTMessageFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTMessageFilter>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTProcessingSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTProcessingSettings 
    {
        /// <summary>Gets or sets a value indicating whether to mask security information.</summary>
        [Newtonsoft.Json.JsonProperty("MaskSecurityInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MaskSecurityInfo { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to preserve interchange.</summary>
        [Newtonsoft.Json.JsonProperty("PreserveInterchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreserveInterchange { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to suspend interchange on error.</summary>
        [Newtonsoft.Json.JsonProperty("SuspendInterchangeOnError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuspendInterchangeOnError { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to create empty xml tags for trailing separators.</summary>
        [Newtonsoft.Json.JsonProperty("CreateEmptyXmlTagsForTrailingSeparators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateEmptyXmlTagsForTrailingSeparators { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to use dot as decimal separator.</summary>
        [Newtonsoft.Json.JsonProperty("UseDotAsDecimalSeparator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseDotAsDecimalSeparator { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTProcessingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTProcessingSettings>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTSchemaSettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTSchemaSettings 
    {
        /// <summary>Gets or sets the target namespace.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        /// <summary>Gets or sets the schema overrides.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaOverrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EDIFACTSchemaOverrides> SchemaOverrides { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTSchemaSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTSchemaSettings>(data);
        }
    
    }
    
    /// <summary>Model for FilterGroup</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FilterGroup 
    {
        /// <summary>Gets or sets the statements.</summary>
        [Newtonsoft.Json.JsonProperty("Statements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterStatement> Statements { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FilterGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterGroup>(data);
        }
    
    }
    
    /// <summary>Model for WeeklyRecurrence</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class WeeklyRecurrence 
    {
        /// <summary>Gets or sets the week days.</summary>
        [Newtonsoft.Json.JsonProperty("WeekDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeekDays { get; set; }
    
        /// <summary>Gets or sets the recurrence period.</summary>
        [Newtonsoft.Json.JsonProperty("RecurrencePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurrencePeriod { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static WeeklyRecurrence FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WeeklyRecurrence>(data);
        }
    
    }
    
    /// <summary>Model for HourlyRecurrence</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HourlyRecurrence 
    {
        /// <summary>Gets or sets the hours.</summary>
        [Newtonsoft.Json.JsonProperty("Hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }
    
        /// <summary>Gets or sets the minutes.</summary>
        [Newtonsoft.Json.JsonProperty("Minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }
    
        /// <summary>Gets or sets the recurrence period.</summary>
        [Newtonsoft.Json.JsonProperty("RecurrencePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurrencePeriod { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HourlyRecurrence FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HourlyRecurrence>(data);
        }
    
    }
    
    /// <summary>Model for DailyRecurrence</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DailyRecurrence 
    {
        /// <summary>Gets or sets the days.</summary>
        [Newtonsoft.Json.JsonProperty("Days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Days { get; set; }
    
        /// <summary>Gets or sets the recurrence period.</summary>
        [Newtonsoft.Json.JsonProperty("RecurrencePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurrencePeriod { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DailyRecurrence FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DailyRecurrence>(data);
        }
    
    }
    
    /// <summary>Model for X12ValidationOverride</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12ValidationOverrides 
    {
        /// <summary>Gets or sets the message id on which the validation settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to validate EDI types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateEDITypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateEDITypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to validate XSD types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateXSDTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateXSDTypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to allow leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("AllowLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to validate character Set.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateCharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateCharacterSet { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to trim leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("TrimLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets the trailing separator policy.</summary>
        [Newtonsoft.Json.JsonProperty("TrailingSeparatorPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrailingSeparatorPolicy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12ValidationOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12ValidationOverrides>(data);
        }
    
    }
    
    /// <summary>Model for X12EnvelopeOverride</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12EnvelopeOverrides 
    {
        /// <summary>Gets or sets the target namespace on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        /// <summary>Gets or sets the target namespace string on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespaceString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespaceString { get; set; }
    
        /// <summary>Gets or sets the protocol version on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolVersion { get; set; }
    
        /// <summary>Gets or sets the message id on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets the responsible agency code.</summary>
        [Newtonsoft.Json.JsonProperty("ResponsibleAgencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponsibleAgencyCode { get; set; }
    
        /// <summary>Gets or sets the header version.</summary>
        [Newtonsoft.Json.JsonProperty("HeaderVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeaderVersion { get; set; }
    
        /// <summary>Gets or sets the sender application id.</summary>
        [Newtonsoft.Json.JsonProperty("SenderApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderApplicationId { get; set; }
    
        /// <summary>Gets or sets the receiver application id.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverApplicationId { get; set; }
    
        /// <summary>Gets or sets the functional identifier code.</summary>
        [Newtonsoft.Json.JsonProperty("FunctionalIdentifierCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalIdentifierCode { get; set; }
    
        /// <summary>Gets or sets the date format.</summary>
        [Newtonsoft.Json.JsonProperty("DateFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateFormat { get; set; }
    
        /// <summary>Gets or sets the time format.</summary>
        [Newtonsoft.Json.JsonProperty("TimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeFormat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12EnvelopeOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12EnvelopeOverrides>(data);
        }
    
    }
    
    /// <summary>Model for X12MessageIdentifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12MessageIdentifier 
    {
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12MessageIdentifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12MessageIdentifier>(data);
        }
    
    }
    
    /// <summary>Model for X12SchemaReference</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class X12SchemaOverrides 
    {
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets the sender application id.</summary>
        [Newtonsoft.Json.JsonProperty("SenderApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderApplicationId { get; set; }
    
        /// <summary>Gets or sets the target namespace.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static X12SchemaOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<X12SchemaOverrides>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTValidationOverride</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTValidationOverrides 
    {
        /// <summary>Gets or sets the message id on which the validation settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to validate EDI types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateEDITypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateEDITypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to validate XSD types.</summary>
        [Newtonsoft.Json.JsonProperty("ValidateXSDTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateXSDTypes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to allow leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("AllowLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to enforce character Set.</summary>
        [Newtonsoft.Json.JsonProperty("EnforceCharacterSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnforceCharacterSet { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to trim leading and trailing spaces and zeroes.</summary>
        [Newtonsoft.Json.JsonProperty("TrimLeadingAndTrailingSpacesAndZeroes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrimLeadingAndTrailingSpacesAndZeroes { get; set; }
    
        /// <summary>Gets or sets the trailing separator policy.</summary>
        [Newtonsoft.Json.JsonProperty("TrailingSeparatorPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrailingSeparatorPolicy { get; set; }
    
        /// <summary>Gets or sets the internal trailing separator policy.</summary>
        [Newtonsoft.Json.JsonProperty("InternalTrailingSeparatorPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalTrailingSeparatorPolicy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTValidationOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTValidationOverrides>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTEnvelopeOverride</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTEnvelopeOverrides 
    {
        /// <summary>Gets or sets the message id on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets the message version on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageVersion { get; set; }
    
        /// <summary>Gets or sets the message release version on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("MessageRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageRelease { get; set; }
    
        /// <summary>Gets or sets the message association assigned code.</summary>
        [Newtonsoft.Json.JsonProperty("MessageAssociationAssignedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageAssociationAssignedCode { get; set; }
    
        /// <summary>Gets or sets the target namespace on which this envelope settings has to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        /// <summary>Gets or sets the functional group id.</summary>
        [Newtonsoft.Json.JsonProperty("FunctionalGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionalGroupId { get; set; }
    
        /// <summary>Gets or sets the sender application qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("SenderApplicationQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderApplicationQualifier { get; set; }
    
        /// <summary>Gets or sets the sender application id.</summary>
        [Newtonsoft.Json.JsonProperty("SenderApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderApplicationId { get; set; }
    
        /// <summary>Gets or sets the receiver application qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverApplicationQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverApplicationQualifier { get; set; }
    
        /// <summary>Gets or sets the receiver application id.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverApplicationId { get; set; }
    
        /// <summary>Gets or sets the controlling agency code.</summary>
        [Newtonsoft.Json.JsonProperty("ControllingAgencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControllingAgencyCode { get; set; }
    
        /// <summary>Gets or sets the group header message version.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderMessageVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderMessageVersion { get; set; }
    
        /// <summary>Gets or sets the group header message release.</summary>
        [Newtonsoft.Json.JsonProperty("GroupHeaderMessageRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupHeaderMessageRelease { get; set; }
    
        /// <summary>Gets or sets the association assigned code.</summary>
        [Newtonsoft.Json.JsonProperty("AssociationAssignedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociationAssignedCode { get; set; }
    
        /// <summary>Gets or sets the application password.</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationPassword { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTEnvelopeOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTEnvelopeOverrides>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTMessageIdentifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTMessageIdentifier 
    {
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTMessageIdentifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTMessageIdentifier>(data);
        }
    
    }
    
    /// <summary>Model for EDIFACTSchemaReference</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EDIFACTSchemaOverrides 
    {
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageVersion { get; set; }
    
        /// <summary>Gets or sets the message id.</summary>
        [Newtonsoft.Json.JsonProperty("MessageRelease", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageRelease { get; set; }
    
        /// <summary>Gets or sets the application sender id.</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationSenderID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSenderID { get; set; }
    
        /// <summary>Gets or sets the application sender qualifier.</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationSenderQualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSenderQualifier { get; set; }
    
        /// <summary>Gets or sets the association assigned code.</summary>
        [Newtonsoft.Json.JsonProperty("AssociationAssignedCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssociationAssignedCode { get; set; }
    
        /// <summary>Gets or sets the target namespace.</summary>
        [Newtonsoft.Json.JsonProperty("TargetNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNamespace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EDIFACTSchemaOverrides FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EDIFACTSchemaOverrides>(data);
        }
    
    }
    
    /// <summary>Model for FilterStatement</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FilterStatement 
    {
        /// <summary>Gets or sets the property.</summary>
        [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }
    
        /// <summary>Gets or sets the operator.</summary>
        [Newtonsoft.Json.JsonProperty("Operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }
    
        /// <summary>Gets or sets the value.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FilterStatement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterStatement>(data);
        }
    
    }
    
    /// <summary>Model for Application</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Application 
    {
        /// <summary>Application Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Application Version</summary>
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        /// <summary>Application Description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Indicates if this Application is the Default Application</summary>
        [Newtonsoft.Json.JsonProperty("IsDefaultApplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefaultApplication { get; set; }
    
        /// <summary>Is System</summary>
        [Newtonsoft.Json.JsonProperty("IsSystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSystem { get; set; }
    
        /// <summary>Application Status</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Is Configured</summary>
        [Newtonsoft.Json.JsonProperty("IsConfigured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsConfigured { get; set; }
    
        /// <summary>List of Application to which this application has references</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ApplicationReferences { get; set; }
    
        /// <summary>List of Application that have a reference to this application</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationBackReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ApplicationBackReferences { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Application FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data);
        }
    
    }
    
    /// <summary>Model for BTApplication Start Options</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BTApplicationStartOptions 
    {
        /// <summary>Start all orchestrations</summary>
        [Newtonsoft.Json.JsonProperty("StartAllOrchestrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartAllOrchestrations { get; set; }
    
        /// <summary>Start all Send Ports</summary>
        [Newtonsoft.Json.JsonProperty("StartAllSendPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartAllSendPorts { get; set; }
    
        /// <summary>Start all Send Port Groups</summary>
        [Newtonsoft.Json.JsonProperty("StartAllSendPortGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartAllSendPortGroups { get; set; }
    
        /// <summary>Enable all Receive Locations</summary>
        [Newtonsoft.Json.JsonProperty("EnableAllReceiveLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableAllReceiveLocations { get; set; }
    
        /// <summary>Deploy All Policies</summary>
        [Newtonsoft.Json.JsonProperty("DeployAllPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeployAllPolicies { get; set; }
    
        /// <summary>Start Referenced Applications</summary>
        [Newtonsoft.Json.JsonProperty("StartReferencedApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartReferencedApplications { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BTApplicationStartOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BTApplicationStartOptions>(data);
        }
    
    }
    
    /// <summary>Model for Stop Options for BTApplication</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ApplicationStopOptions 
    {
        /// <summary>Unenlist all Orchestrations</summary>
        [Newtonsoft.Json.JsonProperty("UnenlistAllOrchestrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnenlistAllOrchestrations { get; set; }
    
        /// <summary>Unenlist all Send Ports</summary>
        [Newtonsoft.Json.JsonProperty("UnenlistAllSendPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnenlistAllSendPorts { get; set; }
    
        /// <summary>Unenlist all Send Port Groups</summary>
        [Newtonsoft.Json.JsonProperty("UnenlistAllSendPortGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnenlistAllSendPortGroups { get; set; }
    
        /// <summary>Disable all Receive Locations</summary>
        [Newtonsoft.Json.JsonProperty("DisableAllReceiveLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableAllReceiveLocations { get; set; }
    
        /// <summary>Undeploy all policies</summary>
        [Newtonsoft.Json.JsonProperty("UndeployAllPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UndeployAllPolicies { get; set; }
    
        /// <summary>Stop Referenced Applications</summary>
        [Newtonsoft.Json.JsonProperty("StopReferencedApplications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopReferencedApplications { get; set; }
    
        /// <summary>Suspend Running Instances</summary>
        [Newtonsoft.Json.JsonProperty("SuspendRunningInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SuspendRunningInstances { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ApplicationStopOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationStopOptions>(data);
        }
    
    }
    
    /// <summary>Model for BusinessProfile</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BusinessProfile 
    {
        /// <summary>Gets or sets the name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets the description.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets the business identities.</summary>
        [Newtonsoft.Json.JsonProperty("BusinessIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QualifierIdentity> BusinessIdentities { get; set; }
    
        /// <summary>Gets or sets the custom settings.</summary>
        [Newtonsoft.Json.JsonProperty("CustomSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomSetting> CustomSettings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BusinessProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProfile>(data);
        }
    
    }
    
    /// <summary>Model for Fallback Settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FallbackSettings 
    {
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the protocol name.</summary>
        [Newtonsoft.Json.JsonProperty("ProtocolName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProtocolName { get; set; }
    
        /// <summary>Gets or sets a value indicating whether enabled.</summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }
    
        /// <summary>Gets or sets the receiver identity.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity ReceiverIdentity { get; set; }
    
        /// <summary>Gets or sets the sender identity.</summary>
        [Newtonsoft.Json.JsonProperty("SenderIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualifierIdentity SenderIdentity { get; set; }
    
        /// <summary>Gets or sets the X12 fallback protocol settings.</summary>
        [Newtonsoft.Json.JsonProperty("X12FallbackProtocolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public X12ProtocolSettings X12FallbackProtocolSettings { get; set; }
    
        /// <summary>Gets or sets the EDIFACT fallback protocol settings.</summary>
        [Newtonsoft.Json.JsonProperty("EDIFACTFallbackProtocolSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EDIFACTProtocolSettings EDIFACTFallbackProtocolSettings { get; set; }
    
        /// <summary>Gets or sets the biz talk host settings.</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkHostSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BizTalkHostSettings BizTalkHostSettings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FallbackSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FallbackSettings>(data);
        }
    
    }
    
    /// <summary>Model for Fallback Settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BizTalkHostSettings 
    {
        /// <summary>Gets or sets a value indicating whether status reporting is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("EnableStatusReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableStatusReporting { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to log errors to event log.</summary>
        [Newtonsoft.Json.JsonProperty("LogErrorsToEventLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LogErrorsToEventLog { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to log warnings to event log.</summary>
        [Newtonsoft.Json.JsonProperty("LogWarningsToEventLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LogWarningsToEventLog { get; set; }
    
        /// <summary>Gets or sets a value indicating whether to store message payload</summary>
        [Newtonsoft.Json.JsonProperty("StoreMessagePayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StoreMessagePayload { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BizTalkHostSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BizTalkHostSettings>(data);
        }
    
    }
    
    /// <summary>Group properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GroupProperties 
    {
        /// <summary>Name of the BizTalk group</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Name of the machine where Single Sign On (SSO) server resides on.</summary>
        [Newtonsoft.Json.JsonProperty("SSOServerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SSOServerName { get; set; }
    
        /// <summary>Major Version Of BizTalk Server Installed.</summary>
        [Newtonsoft.Json.JsonProperty("MajorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MajorVersion { get; set; }
    
        /// <summary>Minor Version Of BizTalk Server Installed</summary>
        [Newtonsoft.Json.JsonProperty("MinorVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinorVersion { get; set; }
    
        /// <summary>Security groups</summary>
        [Newtonsoft.Json.JsonProperty("SecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecurityGroups SecurityGroups { get; set; }
    
        /// <summary>BizTalk databases</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkDatabases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BizTalkDatabases BizTalkDatabases { get; set; }
    
        /// <summary>Signing certificate</summary>
        [Newtonsoft.Json.JsonProperty("SigningCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateInfo SigningCertificate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GroupProperties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupProperties>(data);
        }
    
    }
    
    /// <summary>Database information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SecurityGroups 
    {
        /// <summary>Name of the BizTalk Administrator Windows Group.</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkAdministratorGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BizTalkAdministratorGroup { get; set; }
    
        /// <summary>Name of the BizTalk Operators Windows Group.</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkOperatorGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BizTalkOperatorGroup { get; set; }
    
        /// <summary>Name of the BizTalk B2B Operators Windows Group.</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkB2BOperatorGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BizTalkB2BOperatorGroup { get; set; }
    
        /// <summary>Name of the BizTalk ReadOnly User Windows Group.</summary>
        [Newtonsoft.Json.JsonProperty("BizTalkReadOnlyUserGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BizTalkReadOnlyUserGroup { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SecurityGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecurityGroups>(data);
        }
    
    }
    
    /// <summary>BizTalk group databases</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BizTalkDatabases 
    {
        /// <summary>Management database information</summary>
        [Newtonsoft.Json.JsonProperty("Management", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseInfo Management { get; set; }
    
        /// <summary>Tracking database information</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseInfo Tracking { get; set; }
    
        /// <summary>Rule engine database information</summary>
        [Newtonsoft.Json.JsonProperty("RuleEngine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseInfo RuleEngine { get; set; }
    
        /// <summary>Business Activity Monitoring database information</summary>
        [Newtonsoft.Json.JsonProperty("BAM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseInfo BAM { get; set; }
    
        /// <summary>Master MessageBox database information</summary>
        [Newtonsoft.Json.JsonProperty("MessageBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DatabaseInfo MessageBox { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BizTalkDatabases FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BizTalkDatabases>(data);
        }
    
    }
    
    /// <summary>Encryption certificate</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CertificateInfo 
    {
        /// <summary>Common Name</summary>
        [Newtonsoft.Json.JsonProperty("CommonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommonName { get; set; }
    
        /// <summary>Thumbprint of the certificate.</summary>
        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CertificateInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CertificateInfo>(data);
        }
    
    }
    
    /// <summary>Database information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DatabaseInfo 
    {
        /// <summary>Database server name</summary>
        [Newtonsoft.Json.JsonProperty("ServerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }
    
        /// <summary>Database name</summary>
        [Newtonsoft.Json.JsonProperty("DatabaseName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DatabaseInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DatabaseInfo>(data);
        }
    
    }
    
    /// <summary>Group settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GroupSettings 
    {
        /// <summary>This property indicates how often the server refreshes the cache of the BizTalk Messaging Configuration objects (in seconds).</summary>
        [Newtonsoft.Json.JsonProperty("ConfigurationCacheRefreshInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConfigurationCacheRefreshInterval { get; set; }
    
        /// <summary>Threshold size (in bytes) for large message support</summary>
        [Newtonsoft.Json.JsonProperty("LargeMessageThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LargeMessageThreshold { get; set; }
    
        /// <summary>Message size below which message will be handled in memory. Any message with a size above this wull be buffered to the file system to reduce memory requirements.</summary>
        [Newtonsoft.Json.JsonProperty("LargeMessageBatchThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LargeMessageBatchThreshold { get; set; }
    
        /// <summary>Interval at which performance counters are refreshed.</summary>
        [Newtonsoft.Json.JsonProperty("PerfCounterSamplingInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PerfCounterSamplingInterval { get; set; }
    
        /// <summary>Indicates the level of tracking which BizTalk server should perform.</summary>
        [Newtonsoft.Json.JsonProperty("EnableGroupLevelTracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableGroupLevelTracking { get; set; }
    
        /// <summary>if tracking settings will be applied during import</summary>
        [Newtonsoft.Json.JsonProperty("AllowTrackingSettingsImport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowTrackingSettingsImport { get; set; }
    
        /// <summary>If analytics is enabled or not</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnalyticsEnabled { get; set; }
    
        /// <summary>Analytics target provider id</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsTargetProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnalyticsTargetProviderId { get; set; }
    
        /// <summary>Analytics target provider parameters.</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsTargetProviderConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AnalyticsTargetProviderConfig { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GroupSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupSettings>(data);
        }
    
    }
    
    /// <summary>The host instance.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HostInstance 
    {
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Name of the BizTalk Host this BizTalk Host instance belongs to</summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        /// <summary>Host type</summary>
        [Newtonsoft.Json.JsonProperty("HostType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostType { get; set; }
    
        /// <summary>NT group Name</summary>
        [Newtonsoft.Json.JsonProperty("NTGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NTGroupName { get; set; }
    
        /// <summary>Logon that this BizTalk Host instance is using.</summary>
        [Newtonsoft.Json.JsonProperty("Logon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logon { get; set; }
    
        /// <summary>Name of the server this BizTalk Host instance is running on.</summary>
        [Newtonsoft.Json.JsonProperty("RunningServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RunningServer { get; set; }
    
        /// <summary>State of the given BizTalk Host instance.</summary>
        [Newtonsoft.Json.JsonProperty("ServiceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceState { get; set; }
    
        /// <summary>Used to enable or disable the BizTalk Host instance. It can only be changed when the BizTalk Host instance is not started.</summary>
        [Newtonsoft.Json.JsonProperty("IsDisabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDisabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HostInstance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostInstance>(data);
        }
    
    }
    
    /// <summary>Host instance settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HostInstanceSettings 
    {
        /// <summary>.NET CLR settings</summary>
        [Newtonsoft.Json.JsonProperty("ClrSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClrSettings ClrSettings { get; set; }
    
        /// <summary>Orchestration memory throttling settings</summary>
        [Newtonsoft.Json.JsonProperty("OrchestrationMemoryThrottlingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrchestrationMemoryThrottlingSettings OrchestrationMemoryThrottlingSettings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HostInstanceSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostInstanceSettings>(data);
        }
    
    }
    
    /// <summary>Host instance .NET CLR settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ClrSettings 
    {
        /// <summary>Maximum worker threads</summary>
        [Newtonsoft.Json.JsonProperty("CLRMaxWorkerThreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CLRMaxWorkerThreads { get; set; }
    
        /// <summary>Minimum worker threads</summary>
        [Newtonsoft.Json.JsonProperty("CLRMinWorkerThreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CLRMinWorkerThreads { get; set; }
    
        /// <summary>Maximum IO threads</summary>
        [Newtonsoft.Json.JsonProperty("CLRMaxIOThreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CLRMaxIOThreads { get; set; }
    
        /// <summary>Minimum IO thread</summary>
        [Newtonsoft.Json.JsonProperty("CLRMinIOThreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CLRMinIOThreads { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ClrSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClrSettings>(data);
        }
    
    }
    
    /// <summary>Host instance orchestration memory throttling settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OrchestrationMemoryThrottlingSettings 
    {
        /// <summary>Physical memory optimal usage</summary>
        [Newtonsoft.Json.JsonProperty("PhysicalMemoryOptimalUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PhysicalMemoryOptimalUsage { get; set; }
    
        /// <summary>Physical memory maximal usage</summary>
        [Newtonsoft.Json.JsonProperty("PhysicalMemoryMaximalUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PhysicalMemoryMaximalUsage { get; set; }
    
        /// <summary>Virtual memory optimal usage</summary>
        [Newtonsoft.Json.JsonProperty("VirtualMemoryOptimalUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualMemoryOptimalUsage { get; set; }
    
        /// <summary>Virtual memory maximal usage</summary>
        [Newtonsoft.Json.JsonProperty("VirtualMemoryMaximalUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualMemoryMaximalUsage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrchestrationMemoryThrottlingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrchestrationMemoryThrottlingSettings>(data);
        }
    
    }
    
    /// <summary>The host.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Host 
    {
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Flag that indicates if host is default host</summary>
        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }
    
        /// <summary>NT group Name</summary>
        [Newtonsoft.Json.JsonProperty("NTGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NTGroupName { get; set; }
    
        /// <summary>Host type</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Flag that indicates if host is trusted</summary>
        [Newtonsoft.Json.JsonProperty("IsTrusted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTrusted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Host FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Host>(data);
        }
    
    }
    
    /// <summary>Host settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HostSettings 
    {
        /// <summary>General settings</summary>
        [Newtonsoft.Json.JsonProperty("GeneralSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeneralSettings GeneralSettings { get; set; }
    
        /// <summary>Resource based throttlingS settings</summary>
        [Newtonsoft.Json.JsonProperty("ResourceBasedThrottlingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceBasedThrottlingSettings ResourceBasedThrottlingSettings { get; set; }
    
        /// <summary>Message process throttling settings</summary>
        [Newtonsoft.Json.JsonProperty("MessageProcessThrottlingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageProcessThrottlingSettings MessageProcessThrottlingSettings { get; set; }
    
        /// <summary>Orchestration throttling settings</summary>
        [Newtonsoft.Json.JsonProperty("OrchestrationThrottlingSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrchestrationThrottlingSettings OrchestrationThrottlingSettings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HostSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HostSettings>(data);
        }
    
    }
    
    /// <summary>General gettings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GeneralSettings 
    {
        /// <summary>whether instances of this BizTalk Host will host the tracking sub service</summary>
        [Newtonsoft.Json.JsonProperty("HostTracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HostTracking { get; set; }
    
        /// <summary>This property indicates whether the BizTalk Host is trusted to collect authentication information.</summary>
        [Newtonsoft.Json.JsonProperty("AuthTrusted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthTrusted { get; set; }
    
        /// <summary>This property indicates whether the host instance process should be created as 32-bit on both 32-bit and 64-bit servers.</summary>
        [Newtonsoft.Json.JsonProperty("IsHost32BitOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHost32BitOnly { get; set; }
    
        /// <summary>This property controls whether the isolated adapter runs in default app domain or the domain of the caller.</summary>
        [Newtonsoft.Json.JsonProperty("UseDefaultAppDomainForIsolatedAdapter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseDefaultAppDomainForIsolatedAdapter { get; set; }
    
        /// <summary>This property turns preservation of White Spaces with mapping on or off.</summary>
        [Newtonsoft.Json.JsonProperty("LegacyWhitespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LegacyWhitespace { get; set; }
    
        /// <summary>This property allow multiple responses to be sent back to a 2-way RL (Isolated-host ONLY).</summary>
        [Newtonsoft.Json.JsonProperty("AllowMultipleResponses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowMultipleResponses { get; set; }
    
        /// <summary>Default timeout for request response messages.</summary>
        [Newtonsoft.Json.JsonProperty("MessagingReqRespTTL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagingReqRespTTL { get; set; }
    
        /// <summary>Maximum number of messaging engine threads per CPU.</summary>
        [Newtonsoft.Json.JsonProperty("ThreadPoolSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThreadPoolSize { get; set; }
    
        /// <summary>service for which perf counters are shown.</summary>
        [Newtonsoft.Json.JsonProperty("MsgAgentPerfCounterServiceClassID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MsgAgentPerfCounterServiceClassID { get; set; }
    
        /// <summary>Messaging polling interval in milliseconds</summary>
        [Newtonsoft.Json.JsonProperty("MessagingMaxReceiveInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagingMaxReceiveInterval { get; set; }
    
        /// <summary>Polling intervals i  milliseconds of orchestrations running in this host.</summary>
        [Newtonsoft.Json.JsonProperty("XlangMaxReceiveInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? XlangMaxReceiveInterval { get; set; }
    
        /// <summary>This is a comment field that allows to associate some friendly name with a decryption certificate.</summary>
        [Newtonsoft.Json.JsonProperty("DecryptCertComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DecryptCertComment { get; set; }
    
        /// <summary>ThumbPrint of the Decryption certificate.</summary>
        [Newtonsoft.Json.JsonProperty("DecryptCertThumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DecryptCertThumbprint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static GeneralSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeneralSettings>(data);
        }
    
    }
    
    /// <summary>Resource based throttlingS settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ResourceBasedThrottlingSettings 
    {
        /// <summary>Maximum number of threads in the process (per CPU) allowed before throttling begins.</summary>
        [Newtonsoft.Json.JsonProperty("ThreadThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThreadThreshold { get; set; }
    
        /// <summary>Maximum number of DB Sessions (per CPU) allowed before throttling begins.</summary>
        [Newtonsoft.Json.JsonProperty("DBSessionThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DBSessionThreshold { get; set; }
    
        /// <summary>Maximum number of in-memory in-flight messages allowed before throttling Message Delivery begins.</summary>
        [Newtonsoft.Json.JsonProperty("InflightMessageThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InflightMessageThreshold { get; set; }
    
        /// <summary>Size of the in-memory Queue that the host maintains as a temporary placeholder for delivering messages.</summary>
        [Newtonsoft.Json.JsonProperty("DeliveryQueueSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeliveryQueueSize { get; set; }
    
        /// <summary>Maximum number of items in the Database.</summary>
        [Newtonsoft.Json.JsonProperty("DBQueueSizeThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DBQueueSizeThreshold { get; set; }
    
        /// <summary>Maximum System-wide Virtual Memory (in percent) usage allowed before throttling begins.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalMemoryThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalMemoryThreshold { get; set; }
    
        /// <summary>Maximum Process Memory (in percent) allowed before throttling begins.</summary>
        [Newtonsoft.Json.JsonProperty("ProcessMemoryThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcessMemoryThreshold { get; set; }
    
        /// <summary>This property specifies the factor by which the Message count in database threshold will be multiplied and then compared against the current record count in the spool table to determine whether the system should throttle on spool table size. 
        /// If this is set to 0, spool table size is not used as a consideration for determining a throttling condition. Max value 1000</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingSpoolMultiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingSpoolMultiplier { get; set; }
    
        /// <summary>This property specifies the factor by which the Message count in database threshold will be multiplied and then compared against the current record count in the tracking table to determine whether the system should throttle on tracking table size. 
        /// If this is set to 0, tracking table size is not used as a consideration for determining a throttling condition.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingTrackingDataMultiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingTrackingDataMultiplier { get; set; }
    
        /// <summary>This property controls when a .NET garbage collection (GC) will be triggered as process memory consumption increases and approaches the threshold. 
        /// When the memory consumption exceeds this percentage value of the memory threshold, a GC is triggered.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingLimitToTriggerGC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingLimitToTriggerGC { get; set; }
    
        /// <summary>This property controls the memory threshold beyond which to throttle the publishing of a batch of messages. The batch memory threshold is computed by multiplying this percentage factor by the Process memory usage threshold. If the memory estimated to execute a publishing batch exceeds the batch memory threshold, the batch will be subject to process memory based throttling. Otherwise the batch will be exempt from process memory based throttling even when the total process memory exceeds the Process memory usage threshold. 
        /// A value of zero indicates that all publishing batches may be subject to process memory based throttling even if the memory estimated to execute the batch is minimal.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingBatchMemoryThresholdPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingBatchMemoryThresholdPercent { get; set; }
    
        /// <summary>This property controls the severity of a process memory triggered throttling condition. 
        /// This is specified in percentage value and this parameter sets the severity of a throttling condition caused when the Process memory usage threshold is exceeded.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingSeverityProcessMemory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingSeverityProcessMemory { get; set; }
    
        /// <summary>This property controls the severity of a database sized triggered throttling condition. 
        /// This is specified in percentage value and this parameter sets the severity of a throttling condition caused when the Message count in database threshold is exceeded.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingSeverityDatabaseSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingSeverityDatabaseSize { get; set; }
    
        /// <summary>This property controls the reaction time of throttling when the In-process size exceeds the threshold. 
        /// This is specified in percentage value and this parameter sets the severity of a throttling condition caused when the In-process messages per CPU threshold is exceeded.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingSeverityInflightMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingSeverityInflightMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ResourceBasedThrottlingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResourceBasedThrottlingSettings>(data);
        }
    
    }
    
    /// <summary>Message process throttling settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MessageProcessThrottlingSettings 
    {
        /// <summary>Number of samples that are used for determining the rate of the Message Publishing by the Service Classes.</summary>
        [Newtonsoft.Json.JsonProperty("MessagePublishSampleSpaceSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagePublishSampleSpaceSize { get; set; }
    
        /// <summary>Time-window (in milliseconds) beyond which samples will be deemed invalid for consideration.</summary>
        [Newtonsoft.Json.JsonProperty("MessagePublishSampleSpaceWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagePublishSampleSpaceWindow { get; set; }
    
        /// <summary>Percent Factor by which the system will overdrive the Input rate.</summary>
        [Newtonsoft.Json.JsonProperty("MessagePublishOverdriveFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagePublishOverdriveFactor { get; set; }
    
        /// <summary>Maximum Delay (in milliseconds) imposed for Message Publishing Throttling. Zero indicates disable Message Publishing Throttling.</summary>
        [Newtonsoft.Json.JsonProperty("MessagePublishMaximumDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessagePublishMaximumDelay { get; set; }
    
        /// <summary>This property increases / decreases the severity of an inbound throttling condition.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingPublishOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingPublishOverride { get; set; }
    
        /// <summary>This property increases / decreases the severity of an outbound throttling condition.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingPublishOverrideSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingPublishOverrideSeverity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MessageDeliverySampleSpaceSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageDeliverySampleSpaceSize { get; set; }
    
        /// <summary>Time-window (in milliseconds) beyond which samples will be deemed invalid for consideration.</summary>
        [Newtonsoft.Json.JsonProperty("MessageDeliverySampleSpaceWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageDeliverySampleSpaceWindow { get; set; }
    
        /// <summary>Percent factor by which the system will overdrive the Input rate for Message Delivery Throttling.</summary>
        [Newtonsoft.Json.JsonProperty("MessageDeliveryOverdriveFactor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageDeliveryOverdriveFactor { get; set; }
    
        /// <summary>Maximum Delay (in milliseconds) imposed for Message Delivery Throttling. Zero indicates disable Message Delivery Throttling.</summary>
        [Newtonsoft.Json.JsonProperty("MessageDeliveryMaximumDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageDeliveryMaximumDelay { get; set; }
    
        /// <summary>This property increases / decreases the severity of an outbound throttling condition.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingDeliveryOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingDeliveryOverride { get; set; }
    
        /// <summary>This property increases / decreases the severity of an outbound throttling condition.</summary>
        [Newtonsoft.Json.JsonProperty("ThrottlingDeliveryOverrideSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThrottlingDeliveryOverrideSeverity { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessageProcessThrottlingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageProcessThrottlingSettings>(data);
        }
    
    }
    
    /// <summary>Orchestration throttling settings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OrchestrationThrottlingSettings 
    {
        /// <summary>dehydration behavior of the orhestration(XLANG) engine. Only if Custom is selected then other xlang settings should be editable.
        /// ValueMap {"0", "1", "2"},
        /// Values {"Always", "Never", "Custom"}]</summary>
        [Newtonsoft.Json.JsonProperty("DehydrationBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DehydrationBehavior { get; set; }
    
        /// <summary>Max waittime (sec) an orchestration instance could block before being dehydrated.</summary>
        [Newtonsoft.Json.JsonProperty("TimeBasedMaxThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeBasedMaxThreshold { get; set; }
    
        /// <summary>Min waittime(sec) an orchestration instance could block before being dehydrated.</summary>
        [Newtonsoft.Json.JsonProperty("TimeBasedMinThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeBasedMinThreshold { get; set; }
    
        /// <summary>If any subscription has &amp;gt;= PauseAt messages waiting to be consumed, then stop delivering messages to subscription instance.</summary>
        [Newtonsoft.Json.JsonProperty("SubscriptionPauseAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionPauseAt { get; set; }
    
        /// <summary>If any subscription was paused due to  PauseAt setting and no of outstanding messages got down to ResumeAt value, then messagebox will resume giving messages to subscription.</summary>
        [Newtonsoft.Json.JsonProperty("SubscriptionResumeAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionResumeAt { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrchestrationThrottlingSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrchestrationThrottlingSettings>(data);
        }
    
    }
    
    /// <summary>The instance.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Instance 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }
    
        /// <summary>Class</summary>
        [Newtonsoft.Json.JsonProperty("Class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        /// <summary>Creation Time</summary>
        [Newtonsoft.Json.JsonProperty("CreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationTime { get; set; }
    
        /// <summary>Error Description</summary>
        [Newtonsoft.Json.JsonProperty("ErrorDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDescription { get; set; }
    
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        /// <summary>Instance Status</summary>
        [Newtonsoft.Json.JsonProperty("InstanceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceStatus { get; set; }
    
        /// <summary>Service Type</summary>
        [Newtonsoft.Json.JsonProperty("ServiceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceType { get; set; }
    
        /// <summary>ServiceType Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceTypeID { get; set; }
    
        /// <summary>Application</summary>
        [Newtonsoft.Json.JsonProperty("Application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application { get; set; }
    
        /// <summary>Error Code</summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }
    
        /// <summary>PendingO peration</summary>
        [Newtonsoft.Json.JsonProperty("PendingOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PendingOperation { get; set; }
    
        /// <summary>MessageBox Server</summary>
        [Newtonsoft.Json.JsonProperty("MessageBoxServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageBoxServer { get; set; }
    
        /// <summary>MessageBox database</summary>
        [Newtonsoft.Json.JsonProperty("MessageBoxDb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageBoxDb { get; set; }
    
        /// <summary>ProcessingS erver</summary>
        [Newtonsoft.Json.JsonProperty("ProcessingServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessingServer { get; set; }
    
        /// <summary>Suspend Time</summary>
        [Newtonsoft.Json.JsonProperty("SuspendTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SuspendTime { get; set; }
    
        /// <summary>Adapter</summary>
        [Newtonsoft.Json.JsonProperty("Adapter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adapter { get; set; }
    
        /// <summary>Uri</summary>
        [Newtonsoft.Json.JsonProperty("Uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>Pending Job Submit Time</summary>
        [Newtonsoft.Json.JsonProperty("PendingJobSubmitTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PendingJobSubmitTime { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Instance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Instance>(data);
        }
    
    }
    
    /// <summary>The message.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Message 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }
    
        /// <summary>Adapter</summary>
        [Newtonsoft.Json.JsonProperty("Adapter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adapter { get; set; }
    
        /// <summary>Creation Time</summary>
        [Newtonsoft.Json.JsonProperty("CreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationTime { get; set; }
    
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        /// <summary>MessageBox DB</summary>
        [Newtonsoft.Json.JsonProperty("MessageBoxDB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageBoxDB { get; set; }
    
        /// <summary>MessageBox Server</summary>
        [Newtonsoft.Json.JsonProperty("MessageBoxServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageBoxServer { get; set; }
    
        /// <summary>Message ID</summary>
        [Newtonsoft.Json.JsonProperty("MessageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? MessageID { get; set; }
    
        /// <summary>Message Type</summary>
        [Newtonsoft.Json.JsonProperty("MessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageType { get; set; }
    
        /// <summary>Originato rParty Name</summary>
        [Newtonsoft.Json.JsonProperty("OriginatorPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatorPartyName { get; set; }
    
        /// <summary>Originator Security Name</summary>
        [Newtonsoft.Json.JsonProperty("OriginatorSecurityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatorSecurityName { get; set; }
    
        /// <summary>Retry Count</summary>
        [Newtonsoft.Json.JsonProperty("RetryCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetryCount { get; set; }
    
        /// <summary>Service Class</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceClass { get; set; }
    
        /// <summary>Service Instance ID</summary>
        [Newtonsoft.Json.JsonProperty("ServiceInstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceInstanceID { get; set; }
    
        /// <summary>Service Name</summary>
        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        /// <summary>Service Status</summary>
        [Newtonsoft.Json.JsonProperty("ServiceStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceStatus { get; set; }
    
        /// <summary>Service Type ID</summary>
        [Newtonsoft.Json.JsonProperty("ServiceTypeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceTypeID { get; set; }
    
        /// <summary>Status</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Submitter</summary>
        [Newtonsoft.Json.JsonProperty("Submitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Submitter { get; set; }
    
        /// <summary>URI</summary>
        [Newtonsoft.Json.JsonProperty("URI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URI { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Message FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(data);
        }
    
    }
    
    /// <summary>Subscription.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Subscription 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }
    
        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>ServiceName</summary>
        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        /// <summary>State</summary>
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object State { get; set; }
    
        /// <summary>Subscription Type</summary>
        [Newtonsoft.Json.JsonProperty("SubscriptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SubscriptionType { get; set; }
    
        /// <summary>Service Instance Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceInstanceId { get; set; }
    
        /// <summary>Service Class</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ServiceClass { get; set; }
    
        /// <summary>Creation Time</summary>
        [Newtonsoft.Json.JsonProperty("CreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreationTime { get; set; }
    
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        /// <summary>Start Window</summary>
        [Newtonsoft.Json.JsonProperty("StartWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartWindow { get; set; }
    
        /// <summary>End Window</summary>
        [Newtonsoft.Json.JsonProperty("EndWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndWindow { get; set; }
    
        /// <summary>Valid Time</summary>
        [Newtonsoft.Json.JsonProperty("ValidTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValidTime { get; set; }
    
        /// <summary>Ordered Delivery</summary>
        [Newtonsoft.Json.JsonProperty("OrderedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderedDelivery { get; set; }
    
        /// <summary>RequestResponse</summary>
        [Newtonsoft.Json.JsonProperty("RequestResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestResponse { get; set; }
    
        /// <summary>Priority</summary>
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Subscription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Subscription>(data);
        }
    
    }
    
    /// <summary>TrackedMessageEvent</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TrackedMessageEvent 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }
    
        /// <summary>Event Type</summary>
        [Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType { get; set; }
    
        /// <summary>Service Name</summary>
        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        /// <summary>Adapter</summary>
        [Newtonsoft.Json.JsonProperty("Adapter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adapter { get; set; }
    
        /// <summary>Uri</summary>
        [Newtonsoft.Json.JsonProperty("Uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>Schema Name</summary>
        [Newtonsoft.Json.JsonProperty("SchemaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaName { get; set; }
    
        /// <summary>Port Name</summary>
        [Newtonsoft.Json.JsonProperty("PortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortName { get; set; }
    
        /// <summary>TimeStamp</summary>
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TimeStamp { get; set; }
    
        /// <summary>Part Count</summary>
        [Newtonsoft.Json.JsonProperty("PartCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PartCount { get; set; }
    
        /// <summary>Size</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }
    
        /// <summary>Decryption Certificate</summary>
        [Newtonsoft.Json.JsonProperty("DecryptionCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DecryptionCertificate { get; set; }
    
        /// <summary>Signature</summary>
        [Newtonsoft.Json.JsonProperty("Signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }
    
        /// <summary>Party Name</summary>
        [Newtonsoft.Json.JsonProperty("PartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartyName { get; set; }
    
        /// <summary>Activity Id</summary>
        [Newtonsoft.Json.JsonProperty("ActivityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActivityId { get; set; }
    
        /// <summary>Message Instance Id</summary>
        [Newtonsoft.Json.JsonProperty("MessageInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? MessageInstanceId { get; set; }
    
        /// <summary>Service Instance Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceInstanceId { get; set; }
    
        /// <summary>Service Class Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceClassId { get; set; }
    
        /// <summary>ServiceClass</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceClass { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TrackedMessageEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackedMessageEvent>(data);
        }
    
    }
    
    /// <summary>TrackedServiceInstance</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TrackedServiceInstance 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Id { get; set; }
    
        /// <summary>Service Name</summary>
        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        /// <summary>Service Class</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceClass { get; set; }
    
        /// <summary>State</summary>
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>StartTime</summary>
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTime { get; set; }
    
        /// <summary>EndTime</summary>
        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTime { get; set; }
    
        /// <summary>Error Code</summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ErrorCode { get; set; }
    
        /// <summary>Error Description</summary>
        [Newtonsoft.Json.JsonProperty("ErrorDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorDescription { get; set; }
    
        /// <summary>Service Instance Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceInstanceId { get; set; }
    
        /// <summary>Assembly Name</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyName { get; set; }
    
        /// <summary>Assembly Version</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyVersion { get; set; }
    
        /// <summary>Deployment Time</summary>
        [Newtonsoft.Json.JsonProperty("DeploymentTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeploymentTime { get; set; }
    
        /// <summary>Duration</summary>
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }
    
        /// <summary>Service Class Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceClassId { get; set; }
    
        /// <summary>Service Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceId { get; set; }
    
        /// <summary>Service Version Id</summary>
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ServiceVersionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TrackedServiceInstance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TrackedServiceInstance>(data);
        }
    
    }
    
    /// <summary>The transaction set.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TransactionSet 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Ack Status Code</summary>
        [Newtonsoft.Json.JsonProperty("AckStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AckStatusCode { get; set; }
    
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementName { get; set; }
    
        /// <summary>Application Receiver</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationReceiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationReceiver { get; set; }
    
        /// <summary>Application Sender</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationSender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSender { get; set; }
    
        /// <summary>Direction</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direction { get; set; }
    
        /// <summary>Document type</summary>
        [Newtonsoft.Json.JsonProperty("DocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocType { get; set; }
    
        /// <summary>Group Control Number</summary>
        [Newtonsoft.Json.JsonProperty("GroupControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupControlNo { get; set; }
    
        /// <summary>Group DateTime</summary>
        [Newtonsoft.Json.JsonProperty("GroupDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? GroupDateTime { get; set; }
    
        /// <summary>Interchange Control Number</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNo { get; set; }
    
        /// <summary>Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InterchangeDateTime { get; set; }
    
        /// <summary>Message Content Key</summary>
        [Newtonsoft.Json.JsonProperty("MessageContentKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageContentKey { get; set; }
    
        /// <summary>Processing DateTime</summary>
        [Newtonsoft.Json.JsonProperty("ProcessingDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ProcessingDateTime { get; set; }
    
        /// <summary>Receiver Party Alias</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyAlias { get; set; }
    
        /// <summary>Sender Party Alias</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyAlias { get; set; }
    
        /// <summary>TransactionSet Control Number</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetControlNo { get; set; }
    
        /// <summary>TransactionSet Id</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransactionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionSet>(data);
        }
    
    }
    
    /// <summary>The transaction set aggregation report.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TransactionSetAggregationReport 
    {
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementName { get; set; }
    
        /// <summary>Direction</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direction { get; set; }
    
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Max Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("MaxInterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaxInterchangeDateTime { get; set; }
    
        /// <summary>Min Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("MinInterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MinInterchangeDateTime { get; set; }
    
        /// <summary>Receiver Party Name</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyName { get; set; }
    
        /// <summary>Sender Party Name</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyName { get; set; }
    
        /// <summary>TransactionSet Count</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TransactionSetCount { get; set; }
    
        /// <summary>TransactionSet Id</summary>
        [Newtonsoft.Json.JsonProperty("TransactionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransactionSetAggregationReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionSetAggregationReport>(data);
        }
    
    }
    
    /// <summary>InterchangeStatusRecord</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InterchangeStatusRecord 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Receiver Party Name</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyName { get; set; }
    
        /// <summary>Sender Party Name</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyName { get; set; }
    
        /// <summary>Receiver Party Alias</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyAlias { get; set; }
    
        /// <summary>Sender Party Alias</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyAlias { get; set; }
    
        /// <summary>Interchange Control number</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNo { get; set; }
    
        /// <summary>Direction</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direction { get; set; }
    
        /// <summary>Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InterchangeDateTime { get; set; }
    
        /// <summary>Edi Message Type</summary>
        [Newtonsoft.Json.JsonProperty("EdiMessageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdiMessageType { get; set; }
    
        /// <summary>IsaStatusCode</summary>
        [Newtonsoft.Json.JsonProperty("IsaStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsaStatusCode { get; set; }
    
        /// <summary>Group Count</summary>
        [Newtonsoft.Json.JsonProperty("GroupCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object GroupCount { get; set; }
    
        /// <summary>Port Id</summary>
        [Newtonsoft.Json.JsonProperty("PortID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PortID { get; set; }
    
        /// <summary>Ts CorrelationId</summary>
        [Newtonsoft.Json.JsonProperty("TsCorrelationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TsCorrelationId { get; set; }
    
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AgreementName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static InterchangeStatusRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InterchangeStatusRecord>(data);
        }
    
    }
    
    /// <summary>InterchangeAggregationRecord</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class InterchangeAggregationRecord 
    {
        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Interchange Count</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InterchangeCount { get; set; }
    
        /// <summary>Sender Party Name</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyName { get; set; }
    
        /// <summary>Receiver Party Name</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyName { get; set; }
    
        /// <summary>Direction</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direction { get; set; }
    
        /// <summary>Min Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("MinInterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MinInterchangeDateTime { get; set; }
    
        /// <summary>Max Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("MaxInterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaxInterchangeDateTime { get; set; }
    
        /// <summary>Edi Encoding Type</summary>
        [Newtonsoft.Json.JsonProperty("EdiEncodingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdiEncodingType { get; set; }
    
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static InterchangeAggregationRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InterchangeAggregationRecord>(data);
        }
    
    }
    
    /// <summary>AS2 status record</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AS2StatusRecord 
    {
        /// <summary>Id</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementName { get; set; }
    
        /// <summary>AS2 From</summary>
        [Newtonsoft.Json.JsonProperty("AS2From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AS2From { get; set; }
    
        /// <summary>AS2 Party Role</summary>
        [Newtonsoft.Json.JsonProperty("AS2PartyRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AS2PartyRole { get; set; }
    
        /// <summary>AS2 To</summary>
        [Newtonsoft.Json.JsonProperty("AS2To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AS2To { get; set; }
    
        /// <summary>Days To Check Duplicate</summary>
        [Newtonsoft.Json.JsonProperty("DaysToCheckDuplicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DaysToCheckDuplicate { get; set; }
    
        /// <summary>File name</summary>
        [Newtonsoft.Json.JsonProperty("Filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }
    
        /// <summary>Interchange Control Number</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNo { get; set; }
    
        /// <summary>Is AS2 Message Duplicate</summary>
        [Newtonsoft.Json.JsonProperty("IsAS2MessageDuplicate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsAS2MessageDuplicate { get; set; }
    
        /// <summary>Is Reliable Messaging Enabled</summary>
        [Newtonsoft.Json.JsonProperty("IsReliableMessagingEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsReliableMessagingEnabled { get; set; }
    
        /// <summary>Mdn Processing Status</summary>
        [Newtonsoft.Json.JsonProperty("MdnProcessingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MdnProcessingStatus { get; set; }
    
        /// <summary>Message Date Time</summary>
        [Newtonsoft.Json.JsonProperty("MessageDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MessageDateTime { get; set; }
    
        /// <summary>Message Encryption Type</summary>
        [Newtonsoft.Json.JsonProperty("MessageEncryptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageEncryptionType { get; set; }
    
        /// <summary>Message ID</summary>
        [Newtonsoft.Json.JsonProperty("MessageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageID { get; set; }
    
        /// <summary>Message Signature Type</summary>
        [Newtonsoft.Json.JsonProperty("MessageSignatureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageSignatureType { get; set; }
    
        /// <summary>Receiver Party Name</summary>
        [Newtonsoft.Json.JsonProperty("ReceiverPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverPartyName { get; set; }
    
        /// <summary>Sender Party Name</summary>
        [Newtonsoft.Json.JsonProperty("SenderPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderPartyName { get; set; }
    
        /// <summary>Creation time</summary>
        [Newtonsoft.Json.JsonProperty("TimeCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TimeCreated { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AS2StatusRecord FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AS2StatusRecord>(data);
        }
    
    }
    
    /// <summary>Batch</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Batch 
    {
        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Batch Status</summary>
        [Newtonsoft.Json.JsonProperty("BatchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchStatus { get; set; }
    
        /// <summary>Batch Name</summary>
        [Newtonsoft.Json.JsonProperty("BatchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchName { get; set; }
    
        /// <summary>Destination Party Name</summary>
        [Newtonsoft.Json.JsonProperty("DestinationPartyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationPartyName { get; set; }
    
        /// <summary>Activation Time</summary>
        [Newtonsoft.Json.JsonProperty("ActivationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActivationTime { get; set; }
    
        /// <summary>Batch Occurrence Count</summary>
        [Newtonsoft.Json.JsonProperty("BatchOccurrenceCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BatchOccurrenceCount { get; set; }
    
        /// <summary>Edi Encoding Type</summary>
        [Newtonsoft.Json.JsonProperty("EdiEncodingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdiEncodingType { get; set; }
    
        /// <summary>Batch Type</summary>
        [Newtonsoft.Json.JsonProperty("BatchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchType { get; set; }
    
        /// <summary>Batch Target</summary>
        [Newtonsoft.Json.JsonProperty("BatchTarget", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchTarget { get; set; }
    
        /// <summary>Batch Element Count</summary>
        [Newtonsoft.Json.JsonProperty("BatchElementCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BatchElementCount { get; set; }
    
        /// <summary>Rejected Batch Element Count</summary>
        [Newtonsoft.Json.JsonProperty("RejectedBatchElementCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RejectedBatchElementCount { get; set; }
    
        /// <summary>Batch Size</summary>
        [Newtonsoft.Json.JsonProperty("BatchSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BatchSize { get; set; }
    
        /// <summary>Last BatchA ction</summary>
        [Newtonsoft.Json.JsonProperty("LastBatchAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastBatchAction { get; set; }
    
        /// <summary>Interchange Control Number</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeControlNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterchangeControlNo { get; set; }
    
        /// <summary>Interchange DateTime</summary>
        [Newtonsoft.Json.JsonProperty("InterchangeDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? InterchangeDateTime { get; set; }
    
        /// <summary>Agreement Name</summary>
        [Newtonsoft.Json.JsonProperty("AgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgreementName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Batch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Batch>(data);
        }
    
    }
    
    /// <summary>Model representing Orchestration</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Orchestration 
    {
        /// <summary>Orchestration Name</summary>
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        /// <summary>Assembly Name</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyName { get; set; }
    
        /// <summary>Application Name</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Status</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Host Name</summary>
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }
    
        /// <summary>Inbound Ports</summary>
        [Newtonsoft.Json.JsonProperty("InboundPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrchestrationInboundPort> InboundPorts { get; set; }
    
        /// <summary>Outbound Ports</summary>
        [Newtonsoft.Json.JsonProperty("OutboundPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrchestrationOutboundPort> OutboundPorts { get; set; }
    
        /// <summary>Used Roles</summary>
        [Newtonsoft.Json.JsonProperty("UsedRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> UsedRoles { get; set; }
    
        /// <summary>Implemented Roles</summary>
        [Newtonsoft.Json.JsonProperty("ImplementedRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ImplementedRoles { get; set; }
    
        /// <summary>Invoked Orchestrations</summary>
        [Newtonsoft.Json.JsonProperty("InvokedOrchestrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InvokedOrchestrations { get; set; }
    
        /// <summary>Tracking Options</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrchestrationTrackingOptions Tracking { get; set; }
    
        /// <summary>Determines whether analytics is enabled</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnalyticsEnabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Orchestration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Orchestration>(data);
        }
    
    }
    
    /// <summary>Model representing an Inbound Port</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OrchestrationInboundPort 
    {
        /// <summary>Port Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Port Binding Type</summary>
        [Newtonsoft.Json.JsonProperty("Binding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Binding { get; set; }
    
        /// <summary>Physical Receive Port bound to Port</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePort { get; set; }
    
        /// <summary>Port Type</summary>
        [Newtonsoft.Json.JsonProperty("PortType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrchestrationInboundPort FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrchestrationInboundPort>(data);
        }
    
    }
    
    /// <summary>Model representing an Outbound Port</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OrchestrationOutboundPort 
    {
        /// <summary>Port Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Port Binding Type</summary>
        [Newtonsoft.Json.JsonProperty("Binding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Binding { get; set; }
    
        /// <summary>Physical SendPort bound to Port</summary>
        [Newtonsoft.Json.JsonProperty("SendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPort { get; set; }
    
        /// <summary>Physical SendPortGroup bound to Port</summary>
        [Newtonsoft.Json.JsonProperty("SendPortGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPortGroup { get; set; }
    
        /// <summary>Port Type</summary>
        [Newtonsoft.Json.JsonProperty("PortType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrchestrationOutboundPort FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrchestrationOutboundPort>(data);
        }
    
    }
    
    /// <summary>Model representing Tracking Options for Orchestration</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OrchestrationTrackingOptions 
    {
        /// <summary>Service Start End</summary>
        [Newtonsoft.Json.JsonProperty("ServiceStartEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceStartEnd { get; set; }
    
        /// <summary>Message Send Receive</summary>
        [Newtonsoft.Json.JsonProperty("MessageSendReceive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageSendReceive { get; set; }
    
        /// <summary>Inbound Message Body</summary>
        [Newtonsoft.Json.JsonProperty("InboundMessageBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InboundMessageBody { get; set; }
    
        /// <summary>Outbound Message Body</summary>
        [Newtonsoft.Json.JsonProperty("OutboundMessageBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutboundMessageBody { get; set; }
    
        /// <summary>Orchestration Events</summary>
        [Newtonsoft.Json.JsonProperty("OrchestartionEvents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrchestartionEvents { get; set; }
    
        /// <summary>Track Properties for Incoming Messages</summary>
        [Newtonsoft.Json.JsonProperty("TrackPropertiesForIncomingMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrackPropertiesForIncomingMessages { get; set; }
    
        /// <summary>Track Properties for Outgoing Messages</summary>
        [Newtonsoft.Json.JsonProperty("TrackPropertiesForOutgoingMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrackPropertiesForOutgoingMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrchestrationTrackingOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrchestrationTrackingOptions>(data);
        }
    
    }
    
    /// <summary>Model for Party</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Party 
    {
        /// <summary>Gets or sets the id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }
    
        /// <summary>Gets or sets the name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets the description.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets a value indicating whether party is a host partner.</summary>
        [Newtonsoft.Json.JsonProperty("IsHostPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHostPartner { get; set; }
    
        /// <summary>Gets or sets the certificate name.</summary>
        [Newtonsoft.Json.JsonProperty("CertificateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateName { get; set; }
    
        /// <summary>Gets or sets the certificate thumbprint.</summary>
        [Newtonsoft.Json.JsonProperty("CertificateThumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateThumbprint { get; set; }
    
        /// <summary>Gets or sets the send port names.</summary>
        [Newtonsoft.Json.JsonProperty("SendPortNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SendPortNames { get; set; }
    
        /// <summary>Party alias</summary>
        [Newtonsoft.Json.JsonProperty("Aliases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartyAlias> Aliases { get; set; }
    
        /// <summary>Gets or sets the business profile names.</summary>
        [Newtonsoft.Json.JsonProperty("BusinessProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BusinessProfiles { get; set; }
    
        /// <summary>Gets or sets the custom settings.</summary>
        [Newtonsoft.Json.JsonProperty("CustomSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomSetting> CustomSettings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Party FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Party>(data);
        }
    
    }
    
    /// <summary>The party alias.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PartyAlias 
    {
        /// <summary>Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Qualifier</summary>
        [Newtonsoft.Json.JsonProperty("Qualifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qualifier { get; set; }
    
        /// <summary>Value</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>If auto created</summary>
        [Newtonsoft.Json.JsonProperty("IsAutoCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAutoCreated { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PartyAlias FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartyAlias>(data);
        }
    
    }
    
    /// <summary>Model for Pipeline</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Pipeline 
    {
        /// <summary>Full Name of Pipeline</summary>
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        /// <summary>Assembly Qualified Name of Pipeline</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyQualifiedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyQualifiedName { get; set; }
    
        /// <summary>Type of Pipeline (Send/Receive/Transform etc.)</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>BTS Assembly Name of Pipeline</summary>
        [Newtonsoft.Json.JsonProperty("BtsAssembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BtsAssembly { get; set; }
    
        /// <summary>Name of the Application to which the Pipeline belongs</summary>
        [Newtonsoft.Json.JsonProperty("Application", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application { get; set; }
    
        /// <summary>Description of the Pipeline</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Tracking Properties of the Pipeline</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PipelineTracking Tracking { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Pipeline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pipeline>(data);
        }
    
    }
    
    /// <summary>Tracking Options for Pipeline</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PipelineTracking 
    {
        /// <summary>Port Start and End Events</summary>
        [Newtonsoft.Json.JsonProperty("ServiceStartEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceStartEnd { get; set; }
    
        /// <summary>Message Send and Receive Events</summary>
        [Newtonsoft.Json.JsonProperty("MessageSendReceive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageSendReceive { get; set; }
    
        /// <summary>Message before Pipeline Processing</summary>
        [Newtonsoft.Json.JsonProperty("InboundMessageBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InboundMessageBody { get; set; }
    
        /// <summary>Message after Pipeline Processing</summary>
        [Newtonsoft.Json.JsonProperty("OutboundMessageBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OutboundMessageBody { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PipelineTracking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PipelineTracking>(data);
        }
    
    }
    
    /// <summary>Policy model</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Policy 
    {
        /// <summary>Name of the Policy.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Application to which policy deployed</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Major revision number</summary>
        [Newtonsoft.Json.JsonProperty("MajorRevision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MajorRevision { get; set; }
    
        /// <summary>Minor revision number</summary>
        [Newtonsoft.Json.JsonProperty("MinorRevision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinorRevision { get; set; }
    
        /// <summary>Policy status</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Policy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Policy>(data);
        }
    
    }
    
    /// <summary>The protocol type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProtocolType 
    {
        /// <summary>Adapter Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Capabilities of adapter</summary>
        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Capabilities { get; set; }
    
        /// <summary>Default send handler name</summary>
        [Newtonsoft.Json.JsonProperty("DefaultSendHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultSendHandler { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProtocolType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProtocolType>(data);
        }
    
    }
    
    /// <summary>Receive location model</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ReceiveLocation 
    {
        /// <summary>Name of the receive location.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Description for the receive location.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Receive port name to which this receive location belongs to</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePortName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePortName { get; set; }
    
        /// <summary>Status of the receive location.</summary>
        [Newtonsoft.Json.JsonProperty("Enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enable { get; set; }
    
        /// <summary>Determines whether the receive location is primary receive location of the receive port</summary>
        [Newtonsoft.Json.JsonProperty("IsPrimary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrimary { get; set; }
    
        /// <summary>Address property for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Public Address property for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("PublicAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicAddress { get; set; }
    
        /// <summary>Protocol for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("TransportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportType { get; set; }
    
        /// <summary>Configuration specific to the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("TransportTypeData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportTypeData { get; set; }
    
        /// <summary>Receive handler for this eceive location.</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiveHandler { get; set; }
    
        /// <summary>Custom data</summary>
        [Newtonsoft.Json.JsonProperty("CustomData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomData { get; set; }
    
        /// <summary>Receive pipeline used to receive a response when a message is sent out through this receive location.</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePipeline { get; set; }
    
        /// <summary>Custom configuration of receive pipeline specific to this instance of the usage of the pipeline.</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePipelineData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePipelineData { get; set; }
    
        /// <summary>Send pipeline used to send data sent through this receive location.</summary>
        [Newtonsoft.Json.JsonProperty("SendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPipeline { get; set; }
    
        /// <summary>Custom configuration of send pipeline specific to this instance of the usage of the pipeline.</summary>
        [Newtonsoft.Json.JsonProperty("SendPipelineData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPipelineData { get; set; }
    
        /// <summary>Service window</summary>
        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReceiveLocationSchedule Schedule { get; set; }
    
        /// <summary>Encryption certificate that is used to encrypt data sent through this port.</summary>
        [Newtonsoft.Json.JsonProperty("EncryptionCert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateInfo EncryptionCert { get; set; }
    
        /// <summary>Field to fragment messages</summary>
        [Newtonsoft.Json.JsonProperty("FragmentMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FragmentMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReceiveLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReceiveLocation>(data);
        }
    
    }
    
    /// <summary>Service window</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ReceiveLocationSchedule 
    {
        /// <summary>Start date of the service window</summary>
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }
    
        /// <summary>Flag indicating if start date of the service window is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("StartDateEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartDateEnabled { get; set; }
    
        /// <summary>Endt date of the service window</summary>
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }
    
        /// <summary>Flag indiacting if end date of the service window is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("EndDateEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EndDateEnabled { get; set; }
    
        /// <summary>Flag that specifies whether the service window is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("ServiceWindowEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceWindowEnabled { get; set; }
    
        /// <summary>Start time for the service window.</summary>
        [Newtonsoft.Json.JsonProperty("FromTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FromTime { get; set; }
    
        /// <summary>End time for the service window.</summary>
        [Newtonsoft.Json.JsonProperty("ToTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ToTime { get; set; }
    
        /// <summary>Recurrence Schedule Type</summary>
        [Newtonsoft.Json.JsonProperty("RecurrenceSchType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecurrenceSchType { get; set; }
    
        /// <summary>Recur From</summary>
        [Newtonsoft.Json.JsonProperty("RecurFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecurFrom { get; set; }
    
        /// <summary>Recurrence Interval</summary>
        [Newtonsoft.Json.JsonProperty("RecurInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecurInterval { get; set; }
    
        /// <summary>Days of week if recurrence schedule type is Weekly</summary>
        [Newtonsoft.Json.JsonProperty("DaysOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DaysOfWeek { get; set; }
    
        /// <summary>Months of year if recurrence schedule type is Months</summary>
        [Newtonsoft.Json.JsonProperty("Months", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Months { get; set; }
    
        /// <summary>Days of month if recurrence schedule type is Months</summary>
        [Newtonsoft.Json.JsonProperty("MonthDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MonthDays { get; set; }
    
        /// <summary>Ordinal Day Of Week if recurrence schedule type is Months</summary>
        [Newtonsoft.Json.JsonProperty("OrdinalDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrdinalDayOfWeek { get; set; }
    
        /// <summary>Ordinal type if recurrence schedule type is Months</summary>
        [Newtonsoft.Json.JsonProperty("OrdinalSchedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrdinalSchedule { get; set; }
    
        /// <summary>if Schedule Is Ordinal</summary>
        [Newtonsoft.Json.JsonProperty("ScheduleIsOrdinal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScheduleIsOrdinal { get; set; }
    
        /// <summary>If schedule on last day Of month</summary>
        [Newtonsoft.Json.JsonProperty("LastDayOfMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LastDayOfMonth { get; set; }
    
        /// <summary>If auto adjust to day light saving</summary>
        [Newtonsoft.Json.JsonProperty("AutoAdjustToDaylightSaving", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoAdjustToDaylightSaving { get; set; }
    
        /// <summary>Time zone</summary>
        [Newtonsoft.Json.JsonProperty("ScheduleTimeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScheduleTimeZone { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReceiveLocationSchedule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReceiveLocationSchedule>(data);
        }
    
    }
    
    /// <summary>Model for Receive port</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ReceivePort 
    {
        /// <summary>Name of the recieve port.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Description for the receive port.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Determines whether the port is two-way</summary>
        [Newtonsoft.Json.JsonProperty("IsTwoWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTwoWay { get; set; }
    
        /// <summary>Application name to which receive port belongs to</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Custom data</summary>
        [Newtonsoft.Json.JsonProperty("CustomData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomData { get; set; }
    
        /// <summary>Collection of inbound transforms of receive port</summary>
        [Newtonsoft.Json.JsonProperty("InboundTransforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InboundTransforms { get; set; }
    
        /// <summary>Collection of outbound transforms of a two-way receive port</summary>
        [Newtonsoft.Json.JsonProperty("OutboundTransforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutboundTransforms { get; set; }
    
        /// <summary>Desired level of document tracking for the receive port.</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tracking Tracking { get; set; }
    
        /// <summary>Determines whether analytics is enabled</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnalyticsEnabled { get; set; }
    
        /// <summary>List of receive locations of the receive port</summary>
        [Newtonsoft.Json.JsonProperty("ReceiveLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReceiveLocations { get; set; }
    
        /// <summary>Primary receive location name</summary>
        [Newtonsoft.Json.JsonProperty("PrimaryReceiveLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryReceiveLocation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReceivePort FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReceivePort>(data);
        }
    
    }
    
    /// <summary>Port tracking details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Tracking 
    {
        /// <summary>Message body tracking</summary>
        [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageBodyTracking Body { get; set; }
    
        /// <summary>Message property tracking</summary>
        [Newtonsoft.Json.JsonProperty("Property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePropertyTracking Property { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tracking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tracking>(data);
        }
    
    }
    
    /// <summary>Message body tracking</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MessageBodyTracking 
    {
        /// <summary>Flag indicating whether body to be tracked before port processing of request message</summary>
        [Newtonsoft.Json.JsonProperty("BeforeSendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeforeSendPipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked after port processing of request message</summary>
        [Newtonsoft.Json.JsonProperty("AfterSendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AfterSendPipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked before port processing of response message</summary>
        [Newtonsoft.Json.JsonProperty("BeforeReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeforeReceivePipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked after port processing of response message</summary>
        [Newtonsoft.Json.JsonProperty("AfterReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AfterReceivePipeline { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessageBodyTracking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessageBodyTracking>(data);
        }
    
    }
    
    /// <summary>Message Property Tracking</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MessagePropertyTracking 
    {
        /// <summary>Flag indicating whether body to be tracked before port processing of request message</summary>
        [Newtonsoft.Json.JsonProperty("BeforeSendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeforeSendPipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked after port processing of request message</summary>
        [Newtonsoft.Json.JsonProperty("AfterSendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AfterSendPipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked before port processing of response message</summary>
        [Newtonsoft.Json.JsonProperty("BeforeReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeforeReceivePipeline { get; set; }
    
        /// <summary>Flag indicating whether body to be tracked after port processing of response message</summary>
        [Newtonsoft.Json.JsonProperty("AfterReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AfterReceivePipeline { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MessagePropertyTracking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePropertyTracking>(data);
        }
    
    }
    
    /// <summary>Class Representing Resource (Assembly/Script/Binding etc.)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Resource 
    {
        /// <summary>Name of the Resource</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Type of Resource</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Name of the application</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Resource FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Resource>(data);
        }
    
    }
    
    /// <summary>Model for Role</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RoleLink 
    {
        /// <summary>Name of the role link.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Service link type</summary>
        [Newtonsoft.Json.JsonProperty("ServiceLinkType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceLinkType { get; set; }
    
        /// <summary>Application Name</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Assembly name</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyName { get; set; }
    
        /// <summary>List of enlisted parties</summary>
        [Newtonsoft.Json.JsonProperty("EnlistedParties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnlistedParty> EnlistedParties { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RoleLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoleLink>(data);
        }
    
    }
    
    /// <summary>The enlisted party.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EnlistedParty 
    {
        /// <summary>Name of party</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Port mappings</summary>
        [Newtonsoft.Json.JsonProperty("Mappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnlistedPartyMapping> Mappings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EnlistedParty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnlistedParty>(data);
        }
    
    }
    
    /// <summary>The enlisted party mapping.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EnlistedPartyMapping 
    {
        /// <summary>Port type Name</summary>
        [Newtonsoft.Json.JsonProperty("PortTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PortTypeName { get; set; }
    
        /// <summary>Operation name</summary>
        [Newtonsoft.Json.JsonProperty("OperationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }
    
        /// <summary>Sendport bound to the party</summary>
        [Newtonsoft.Json.JsonProperty("SendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EnlistedPartyMapping FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnlistedPartyMapping>(data);
        }
    
    }
    
    /// <summary>Model for BTSchema</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Schema 
    {
        /// <summary>Schema Name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Target Namespace</summary>
        [Newtonsoft.Json.JsonProperty("TargetNameSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetNameSpace { get; set; }
    
        /// <summary>Root Name</summary>
        [Newtonsoft.Json.JsonProperty("RootName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootName { get; set; }
    
        /// <summary>Application Name</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Assembly Name</summary>
        [Newtonsoft.Json.JsonProperty("AssemblyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssemblyName { get; set; }
    
        /// <summary>Schema Type</summary>
        [Newtonsoft.Json.JsonProperty("SchemaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaType { get; set; }
    
        /// <summary>Schema Description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Tracking Options for Schema</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaTracking Tracking { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Schema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Schema>(data);
        }
    
    }
    
    /// <summary>Schema Tracking Model</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SchemaTracking 
    {
        /// <summary>List of all Tracked Properties</summary>
        [Newtonsoft.Json.JsonProperty("TrackedProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemaTrackingProperty> TrackedProperties { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SchemaTracking FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaTracking>(data);
        }
    
    }
    
    /// <summary>BT Schema Tracking Property Model</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SchemaTrackingProperty 
    {
        /// <summary>Tracking Property Name</summary>
        [Newtonsoft.Json.JsonProperty("PropertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }
    
        /// <summary>Indicates if specific Tracking Property is enabled</summary>
        [Newtonsoft.Json.JsonProperty("TrackingEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TrackingEnabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SchemaTrackingProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaTrackingProperty>(data);
        }
    
    }
    
    /// <summary>Model for SendPortGroup</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SendPortGroup 
    {
        /// <summary>Name of the SendPortGroup</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>List of SendPorts in the group</summary>
        [Newtonsoft.Json.JsonProperty("SendPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SendPorts { get; set; }
    
        /// <summary>Custom Data</summary>
        [Newtonsoft.Json.JsonProperty("CustomData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomData { get; set; }
    
        /// <summary>Filter</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filter { get; set; }
    
        /// <summary>Port Status</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Application Name</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SendPortGroup FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendPortGroup>(data);
        }
    
    }
    
    /// <summary>Model for Send port</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SendPort 
    {
        /// <summary>Name of the send port.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Description for the send port.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Application name to which sendport belongs to</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Whether the send port is dynamic or static</summary>
        [Newtonsoft.Json.JsonProperty("IsDynamic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDynamic { get; set; }
    
        /// <summary>Determines whether the port is two-way</summary>
        [Newtonsoft.Json.JsonProperty("IsTwoWay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTwoWay { get; set; }
    
        /// <summary>Status of the send port.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Custom data</summary>
        [Newtonsoft.Json.JsonProperty("CustomData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomData { get; set; }
    
        /// <summary>Primary transport information</summary>
        [Newtonsoft.Json.JsonProperty("PrimaryTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportInfo PrimaryTransport { get; set; }
    
        /// <summary>Secondary transport of the static send port.</summary>
        [Newtonsoft.Json.JsonProperty("SecondaryTransport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportInfo SecondaryTransport { get; set; }
    
        /// <summary>Send pipeline used to send data sent through this port.</summary>
        [Newtonsoft.Json.JsonProperty("SendPipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPipeline { get; set; }
    
        /// <summary>Custom configuration specific to this instance of the usage of the pipeline.</summary>
        [Newtonsoft.Json.JsonProperty("SendPipelineData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendPipelineData { get; set; }
    
        /// <summary>Receive pipeline used to receive a response when a message is sent out through this port.</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePipeline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePipeline { get; set; }
    
        /// <summary>Custom configuration information specific to the current instance of the receive pipeline.</summary>
        [Newtonsoft.Json.JsonProperty("ReceivePipelineData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceivePipelineData { get; set; }
    
        /// <summary>Collection of inbound transforms of two-way send port</summary>
        [Newtonsoft.Json.JsonProperty("InboundTransforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InboundTransforms { get; set; }
    
        /// <summary>Collection of outbound transforms of send port</summary>
        [Newtonsoft.Json.JsonProperty("OutboundTransforms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutboundTransforms { get; set; }
    
        /// <summary>Desired level of document tracking for the send port.</summary>
        [Newtonsoft.Json.JsonProperty("Tracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tracking Tracking { get; set; }
    
        /// <summary>Determines whether analytics is enabled</summary>
        [Newtonsoft.Json.JsonProperty("AnalyticsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AnalyticsEnabled { get; set; }
    
        /// <summary>Encryption certificate that is used to encrypt data sent through this port.</summary>
        [Newtonsoft.Json.JsonProperty("EncryptionCert", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CertificateInfo EncryptionCert { get; set; }
    
        /// <summary>Optional filter expression used for this send port.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filter { get; set; }
    
        /// <summary>Priority of the send port.</summary>
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        /// <summary>Gets or sets a value indicating whether or not failed messages are routed to failed message subscribers.</summary>
        [Newtonsoft.Json.JsonProperty("RouteFailedMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RouteFailedMessage { get; set; }
    
        /// <summary>Flag specifying whether or not the send port orders the delivery of messages.</summary>
        [Newtonsoft.Json.JsonProperty("OrderedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrderedDelivery { get; set; }
    
        /// <summary>Flag indicating whether or not the send port stops sending messages on a failure.</summary>
        [Newtonsoft.Json.JsonProperty("StopSendingOnFailure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopSendingOnFailure { get; set; }
    
        /// <summary>Flag indicating whether enforce order across outbound locations for dynamic send port.</summary>
        [Newtonsoft.Json.JsonProperty("OrderPerAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrderPerAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SendPort FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendPort>(data);
        }
    
    }
    
    /// <summary>The transport info.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TransportInfo 
    {
        /// <summary>Address property for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Protocol for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("TransportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportType { get; set; }
    
        /// <summary>Configuration specific to the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("TransportTypeData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportTypeData { get; set; }
    
        /// <summary>Send handler for this transport.</summary>
        [Newtonsoft.Json.JsonProperty("SendHandler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SendHandler { get; set; }
    
        /// <summary>Retry count for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("RetryCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetryCount { get; set; }
    
        /// <summary>Retry interval for the adapter.</summary>
        [Newtonsoft.Json.JsonProperty("RetryInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetryInterval { get; set; }
    
        /// <summary>Flag that specifies whether the BizTalk Message Queuing adapter supports ordered delivery.</summary>
        [Newtonsoft.Json.JsonProperty("OrderedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OrderedDelivery { get; set; }
    
        /// <summary>Service window</summary>
        [Newtonsoft.Json.JsonProperty("Schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Schedule Schedule { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransportInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransportInfo>(data);
        }
    
    }
    
    /// <summary>Service window</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Schedule 
    {
        /// <summary>Flag that specifies whether the service window is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("ServiceWindowEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ServiceWindowEnabled { get; set; }
    
        /// <summary>Start time for the service window.</summary>
        [Newtonsoft.Json.JsonProperty("FromTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FromTime { get; set; }
    
        /// <summary>End time for the service window.</summary>
        [Newtonsoft.Json.JsonProperty("ToTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ToTime { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Schedule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Schedule>(data);
        }
    
    }
    
    /// <summary>Model for transform</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Transform 
    {
        /// <summary>Name of the transform</summary>
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        /// <summary>Application name of the transform</summary>
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        /// <summary>Transform description</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Transform assembly</summary>
        [Newtonsoft.Json.JsonProperty("Assembly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assembly { get; set; }
    
        /// <summary>Transform source schema</summary>
        [Newtonsoft.Json.JsonProperty("SourceSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceSchema { get; set; }
    
        /// <summary>Transform target schema</summary>
        [Newtonsoft.Json.JsonProperty("TargetSchema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetSchema { get; set; }
    
        /// <summary>Xml content</summary>
        [Newtonsoft.Json.JsonProperty("XmlContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XmlContent { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Transform FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transform>(data);
        }
    
    }
    
    /// <summary>The control command to send to the batch.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ControlAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Activate")]
        Activate = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Resume")]
        Resume = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Override")]
        Override = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Terminate")]
        Terminate = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ControlMessageProcessed")]
        ControlMessageProcessed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ControlMessageAwaitingProcessing")]
        ControlMessageAwaitingProcessing = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ControlMessageAwaitingProcessing")]
        ControlMessageAwaitingProcessing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotActivated")]
        NotActivated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedNoActiveOrchestrationFound")]
        ActivatedNoActiveOrchestrationFound = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedOrchestrationNotInstantiated")]
        ActivatedOrchestrationNotInstantiated = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedOrchestrationNotRunning")]
        ActivatedOrchestrationNotRunning = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedOrchestrationRunning")]
        ActivatedOrchestrationRunning = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedOrchestrationSuspended")]
        ActivatedOrchestrationSuspended = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ActivatedOrchestrationStatusUnknown")]
        ActivatedOrchestrationStatusUnknown = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Defined")]
        Defined = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Released")]
        Released = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 5,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ClientResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
        
        public ClientResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers) 
        {
            StatusCode = statusCode; 
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ClientResponse<TResult> : ClientResponse
    {
        public TResult Result { get; private set; }
        
        public ClientResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result) 
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108